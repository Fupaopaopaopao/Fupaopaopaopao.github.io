<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Jump Game</title>
    <link href="/2024/11/09/Jump-Game/"/>
    <url>/2024/11/09/Jump-Game/</url>
    
    <content type="html"><![CDATA[<p>You are given an integer array nums. You are initially positioned at the array’s first index, and each element in the array represents your maximum jump length at that position.</p><p>Return true if you can reach the last index, or false otherwise.</p><p>想的几乎没有问题，问题在于记录目前能到达的最远才行，我之前只能判断某个点是否足以到达终点<br>所以应该保证记录能跳到的最远距离，如果目前的index要比这个大 那就是false了</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canJump</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        max_pos = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> i &gt; max_pos:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            max_pos = <span class="hljs-built_in">max</span>(max_pos,i+nums[i])<br>            <br>            <span class="hljs-keyword">if</span> (i+nums[i]+<span class="hljs-number">1</span>) &gt;= <span class="hljs-built_in">len</span>(nums):<br>         <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Best Time to Buy and Sell Stock II</title>
    <link href="/2024/11/09/Best-Time-to-Buy-and-Sell-Stock-II/"/>
    <url>/2024/11/09/Best-Time-to-Buy-and-Sell-Stock-II/</url>
    
    <content type="html"><![CDATA[<p>You are given an integer array prices where prices[i] is the price of a given stock on the ith day.</p><p>On each day, you may decide to buy and&#x2F;or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p><p>Find and return the maximum profit you can achieve.</p><p>这是因为在这种交易规则下，我们的目标是<strong>累积所有的上涨差值</strong>，而每次上涨就代表了一个潜在的获利机会。只要当前价格比前一天高，我们就可以看作在前一天买入、当天卖出，获得该天和前一天之间的价格差，从而最大化利润。</p><ul><li><p>连续上涨的累积：如果连续几天价格在上涨，比如 1 -&gt; 3 -&gt; 5 -&gt; 6，则直接在 1 买入、6 卖出和每天都买卖效果是相同的。即 6 - 1 &#x3D; (3 - 1) + (5 - 3) + (6 - 5)，通过每次价格上涨时进行买卖，我们可以把上涨的部分都累加起来。</p></li><li><p>在本问题中没有限制买卖次数：因为没有买卖次数的限制，所以我们可以“贪心”地在每次上涨的时候获利，这样就可以累积所有的利润，而不用等到价格大幅上涨后再卖出。</p></li></ul><blockquote><p>Note：这个算法在股市中不能最大化收益，因为无法同天买卖且股市有交易次数的限制</p></blockquote><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">prices</span>):<br>    max_profit = <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(prices)):<br>        <span class="hljs-keyword">if</span> prices[i] &gt; prices[i - <span class="hljs-number">1</span>]:  <span class="hljs-comment"># 如果今天价格比昨天高</span><br>            max_profit += prices[i] - prices[i - <span class="hljs-number">1</span>]  <span class="hljs-comment"># 累加上涨的差值</span><br>            <br>    <span class="hljs-keyword">return</span> max_profit<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Best Time to Buy and Sell Stock</title>
    <link href="/2024/11/09/Best-Time-to-Buy-and-Sell-Stock/"/>
    <url>/2024/11/09/Best-Time-to-Buy-and-Sell-Stock/</url>
    
    <content type="html"><![CDATA[<p>You are given an array prices where prices[i] is the price of a given stock on the ith day.</p><p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p><p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0</p><p>注意，我们关注的是最大收益，而不是最大的价格，所以只要记录最大收益即可</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        max_profit = <span class="hljs-number">0</span><br>        min_price = <span class="hljs-number">10001</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(prices)):<br>            <span class="hljs-keyword">if</span> prices[i] &lt; min_price:<br>                min_price = prices[i]<br>            <span class="hljs-keyword">elif</span> prices[i] - min_price &gt; max_profit:<br>                max_profit = prices[i] - min_price<br>        <span class="hljs-keyword">return</span> max_profit<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rotate Array</title>
    <link href="/2024/11/08/Rotate-Array/"/>
    <url>/2024/11/08/Rotate-Array/</url>
    
    <content type="html"><![CDATA[<p>Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.</p><p>Example 1:  </p><p>Input: nums &#x3D; [1,2,3,4,5,6,7], k &#x3D; 3<br>Output: [5,6,7,1,2,3,4]<br>Explanation:<br>rotate 1 steps to the right: [7,1,2,3,4,5,6]<br>rotate 2 steps to the right: [6,7,1,2,3,4,5]<br>rotate 3 steps to the right: [5,6,7,1,2,3,4]  </p><p>Example 2:  </p><p>Input: nums &#x3D; [-1,-100,3,99], k &#x3D; 2<br>Output: [3,99,-1,-100]<br>Explanation:<br>rotate 1 steps to the right: [99,-1,-100,3]<br>rotate 2 steps to the right: [3,99,-1,-100]  </p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        k %= n  <br>        nums.reverse()<br>        nums[:k] = <span class="hljs-built_in">reversed</span>(nums[:k])<br>        nums[k:] = <span class="hljs-built_in">reversed</span>(nums[k:])<br></code></pre></td></tr></table></figure><p>一个On时间复杂度O1空间的办法，其实还有那种很直接的，拆开再合起来，非常直接，非常大</p>]]></content>
    
    
    
    <tags>
      
      <tag>Algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Majority Element</title>
    <link href="/2024/11/08/Majority-Element/"/>
    <url>/2024/11/08/Majority-Element/</url>
    
    <content type="html"><![CDATA[<p>Given an array nums of size n, return the majority element.</p><p>The majority element is the element that appears more than ⌊n &#x2F; 2⌋ times. You may assume that the majority element always exists in the array.</p><p>有天才，谁想出来的答案<br>就是说我计数一旦有数字比我这个多那肯定就是 cnt&#x3D;0</p><p>Boyer-Moore投票算法 非常好算法O(n)的时间复杂度</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">majorityElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        candidate = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 初始化候选多数元素</span><br>        count = <span class="hljs-number">0</span>  <span class="hljs-comment"># 初始化计数器</span><br><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>:<br>                candidate = num  <span class="hljs-comment"># 重置候选多数元素</span><br>                count = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> num == candidate:<br>                count += <span class="hljs-number">1</span>  <span class="hljs-comment"># 相同元素，计数器加1</span><br>            <span class="hljs-keyword">else</span>:<br>                count -= <span class="hljs-number">1</span>  <span class="hljs-comment"># 不同元素，计数器减1</span><br>        <br>        <span class="hljs-keyword">return</span> candidate<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Remove Duplicates from Sorted Array II</title>
    <link href="/2024/11/08/Remove-Duplicates-from-Sorted-Array-II/"/>
    <url>/2024/11/08/Remove-Duplicates-from-Sorted-Array-II/</url>
    
    <content type="html"><![CDATA[<p>Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.</p><p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.</p><p>Return k after placing the final result in the first k slots of nums.</p><p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</p><p>其实和前面那道题非常相似，值得注意的是，我们不能把i-2和i比较而是需要使用cnt作为指针，因为当cnt位置被更换时如果下一位其实和这一位相同，但i-2也会等于这一位<br>所以我们必须要知道在数组被更改之前的排列状况，也就是cnt位置之前的那一位才是我们需要的</p><p>例如</p><p>[1,1,1,2,2,3]<br>当循环进行到index &#x3D; 3时，cnt add 1，index-1将被更新为2<br>index向下一位，如果我们使用nums[i-2] !&#x3D; nums[i] 作为比较标准 那么对于index&#x3D;4这个2来说就重复了<br><strong>cnt-1位置上是上一次可以被保留的数字，且这个位置之前的所有数字都是被保留的</strong><br>因此我们只要判断cnt-2和下一个数字是否相同即可，使用nums[cnt-2] !&#x3D; nums[i]</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 如果数组长度小于等于2，直接返回长度</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) &lt;= <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(nums)<br>        <br>        cnt = <span class="hljs-number">2</span>  <span class="hljs-comment"># 从索引2开始，因为前两个元素不用处理</span><br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-comment"># 只在当前元素和 `cnt - 2` 指向的元素不同时，才将其放在 `cnt` 位置</span><br>            <span class="hljs-keyword">if</span> nums[i] != nums[cnt - <span class="hljs-number">2</span>]:<br>                nums[cnt] = nums[i]<br>                cnt += <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">return</span> cnt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Remove Duplicates from Sorted Array</title>
    <link href="/2024/11/07/Remove-Duplicates-from-Sorted-Array/"/>
    <url>/2024/11/07/Remove-Duplicates-from-Sorted-Array/</url>
    
    <content type="html"><![CDATA[<p>同样作为删除列表问题，我们沿用同一种思路。<br><strong>值得注意的是，这个列表是一个已经排序的列表，这意味着所有的相同元素都会相邻，因此我们只要保证元素不会和前一个元素相同即可</strong></p><p>Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.</p><p>Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:</p><p>Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        cnt = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i] != nums[i-<span class="hljs-number">1</span>]:<br>                nums[cnt] = nums[i]<br>                cnt += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> cnt<br>        <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Remove Element</title>
    <link href="/2024/11/07/Remove-Element/"/>
    <url>/2024/11/07/Remove-Element/</url>
    
    <content type="html"><![CDATA[<p>所有的列表中删除都会遇到这个问题，就是我们不能使用index作为循环的指标，因为在删除的时候会更改index。所以我们希望通过把想留下的数值换到要删除的位置，这样所有的不需要的数都会留存在列表的结尾。</p><p>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.</p><p>Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:</p><p>Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.<br>Return k.</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        cnt = <span class="hljs-number">0</span> <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i] != val:<br>                nums[cnt] = nums[i]<br>                cnt+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> cnt<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Merge sorted Array</title>
    <link href="/2024/11/07/Merge-sorted-Array/"/>
    <url>/2024/11/07/Merge-sorted-Array/</url>
    
    <content type="html"><![CDATA[<p>You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.</p><p>Merge nums1 and nums2 into a single array sorted in non-decreasing order.</p><p>The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], m: <span class="hljs-built_in">int</span>, nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify nums1 in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            nums1[m] = nums2[i]<br>            m += <span class="hljs-number">1</span><br>        nums1.sort()<br></code></pre></td></tr></table></figure><blockquote><p>我原来想直接用切片然后把两个在一起，但是这种在一个循环里面解决显然更快</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些特殊的css style</title>
    <link href="/2024/11/05/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84css-style/"/>
    <url>/2024/11/05/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84css-style/</url>
    
    <content type="html"><![CDATA[<h1 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h1><p>我们一般使用这个来控制元素在水平方向是的排列</p><ol><li>justify-content：center</li><li>justify-content：space-between</li></ol><p>justify-content: space-between; 会将容器内的子元素均匀分布在主轴上，并在每个元素之间留出相等的空间：</p><p>第一个子元素贴近容器的起始边。<br>最后一个子元素贴近容器的结束边。<br>中间的子元素之间留出相等的空间。</p>]]></content>
    
    
    
    <tags>
      
      <tag>frontend</tag>
      
      <tag>Css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to import font in react project</title>
    <link href="/2024/11/05/How-to-import-font-in-react-project/"/>
    <url>/2024/11/05/How-to-import-font-in-react-project/</url>
    
    <content type="html"><![CDATA[<h1 id="引入字体Poppins"><a href="#引入字体Poppins" class="headerlink" title="引入字体Poppins"></a>引入字体Poppins</h1><p>在public中的<code>index.html</code>，以下网址we can get code like this<br><a href="https://fonts.google.com/specimen/Poppins">https://fonts.google.com/specimen/Poppins</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;preconnect&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://fonts.googleapis.com&quot;</span>&gt;<br>&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;preconnect&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://fonts.gstatic.com&quot;</span> crossorigin&gt;<br>&lt;link <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;display=swap&quot;</span> <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>在<code>index.css</code>中把字体设置为Poppins</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="hljs-string">&#x27;Segoe UI&#x27;</span>, <span class="hljs-string">&#x27;Roboto&#x27;</span>, <span class="hljs-string">&#x27;Oxygen&#x27;</span>,<br>    <span class="hljs-string">&#x27;Ubuntu&#x27;</span>, <span class="hljs-string">&#x27;Cantarell&#x27;</span>, <span class="hljs-string">&#x27;Fira Sans&#x27;</span>, <span class="hljs-string">&#x27;Droid Sans&#x27;</span>, <span class="hljs-string">&#x27;Helvetica Neue&#x27;</span>,<br>    sans-serif;<br>  -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;<br>  -moz-osx-<span class="hljs-attribute">font-smoothing</span>: grayscale;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;poppins&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用变量调用颜色"><a href="#使用变量调用颜色" class="headerlink" title="使用变量调用颜色"></a>使用变量调用颜色</h1><ol><li>在 index.css 中定义变量（通常在 :root 中）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* index.css */</span><br><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--font-dark-color</span>: <span class="hljs-number">#333333</span>;<br>  <span class="hljs-attr">--font-light-color</span>: <span class="hljs-number">#999999</span>;<br>  <span class="hljs-attr">--primary-color</span>: <span class="hljs-number">#3498db</span>;<br>  <span class="hljs-attr">--secondary-color</span>: <span class="hljs-number">#2ecc71</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>任何组件的 CSS 文件都可以直接使用这些全局变量。例如：<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-comment">/* ExampleComponent.css */</span><br>.header &#123;<br>  <span class="hljs-built_in">color</span>: <span class="hljs-built_in">var</span>(--<span class="hljs-built_in">font</span>-dark-<span class="hljs-built_in">color</span>);<br>  <span class="hljs-built_in">background</span>-<span class="hljs-built_in">color</span>: <span class="hljs-built_in">var</span>(--primary-<span class="hljs-built_in">color</span>);<br>&#125;<br><br>.subtext &#123;<br>  <span class="hljs-built_in">color</span>: <span class="hljs-built_in">var</span>(--<span class="hljs-built_in">font</span>-light-<span class="hljs-built_in">color</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Component-item</title>
    <link href="/2024/11/05/Component-item/"/>
    <url>/2024/11/05/Component-item/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/pop.png" alt="Goods list"></p><p>想要实现图片的效果，我们需要设置一个组件</p><h1 id="组件-goods-item"><a href="#组件-goods-item" class="headerlink" title="组件 - goods item"></a>组件 - goods item</h1><ol><li>我们可以在src下创建一个folder Components去实现所有的组件，例如，在例子种我们希望实现这样的商品item</li><li>在这个例子种，我们传递的值 props<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Item</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;item&#x27;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;props.image&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item-prices&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item-price-new&quot;</span>&gt;</span></span><br><span class="language-xml">          $&#123;props.new_price&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item-price-old&quot;</span>&gt;</span></span><br><span class="language-xml">          $&#123;props.old_price&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.item</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.item-prices</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.item-price-new</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#374151</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18</span>x;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>&#125;<br>//被划掉的效果<br><span class="hljs-selector-class">.item-price-old</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#8c8c8c</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18</span>x;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>  <span class="hljs-attribute">text-decoration</span>: line-through;<br>&#125;<br><br>//鼠标hover放大<br><span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.05</span>);<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.6s</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="引用组件"><a href="#引用组件" class="headerlink" title="引用组件"></a>引用组件</h1><p>data_product是data，我们组件文件命名为<code>Item.jsx</code></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;popular-item&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xquery">&#123;data_product.<span class="hljs-keyword">map</span>((<span class="hljs-type">item</span>, i) =&gt; &#123;</span><br><span class="language-xquery">    <span class="hljs-keyword">return</span> &lt;Item<span class="hljs-built_in"> key</span>=&#123;i&#125;</span><span class="language-xml"> id=</span><span class="language-xquery">&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.id</span>&#125;</span><span class="language-xml"> name=</span><span class="language-xquery">&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.name</span>&#125;</span><span class="language-xml"> image=</span><span class="language-xquery">&#123;<span class="hljs-type">item</span>.image&#125;</span><span class="language-xml"> new_price=</span><span class="language-xquery">&#123;<span class="hljs-type">item</span>.new_price&#125;</span><span class="language-xml"> old_price=</span><span class="language-xquery">&#123;<span class="hljs-type">item</span>.old_price&#125;</span><span class="language-xml"> /&gt;</span><br><span class="language-xml">  &#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Start new react project</title>
    <link href="/2024/09/16/full-stack-day1/"/>
    <url>/2024/09/16/full-stack-day1/</url>
    
    <content type="html"><![CDATA[<h1 id="Creat-project"><a href="#Creat-project" class="headerlink" title="Creat project"></a>Creat project</h1><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">npx creat-react-app .<br><span class="hljs-built_in">npm</span> start<br></code></pre></td></tr></table></figure><h1 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h1><p>In the <strong>app.js</strong> file, we can construct main page and set router. So in this case, we have a component call <strong>Navbar</strong>, and it need to be shown on all pages in site.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span> () &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Shop</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/men&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">ShopCategory</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;men&quot;</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/women&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">ShopCategory</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;women&quot;</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/kids&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">ShopCategory</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;kids&quot;</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/product&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Product</span> /&gt;</span>&#125; &gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;:productId&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Product</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/cart&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Cart</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/login&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">LoginSignup</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Note: <strong>ES7+ React&#x2F;Redux&#x2F;React-Native snippets</strong> This extention can auto generate import and quick framework. “rafc”</p></blockquote><h1 id="Router-in-page-Navbar"><a href="#Router-in-page-Navbar" class="headerlink" title="Router in page (Navbar)"></a>Router in page (Navbar)</h1><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">export const Navbar = () =&gt; &#123;</span><br><span class="language-xml"></span><br><span class="language-xml">  const [menu, setMenu] = useState(&quot;shop&quot;)</span><br><span class="language-xml">  return (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;navbar&#x27;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;nav-logo&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;logo&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#x27;&#x27;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>SHOPPER<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;nav-menu&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;menu</span> === <span class="hljs-string">&quot;shop&quot;</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125; <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; setMenu(&quot;shop&quot;) &#125;&#125;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">textDecoration:</span> <span class="hljs-string">&#x27;none&#x27;</span>, color: <span class="hljs-string">&#x27;inherit&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/&#x27;</span>&gt;</span>Shop<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>&#123;menu === &quot;shop&quot; ? <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;animated-hr&quot;</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;hidden-hr&quot;</span> /&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;menu</span> === <span class="hljs-string">&quot;men&quot;</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125; <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; setMenu(&quot;men&quot;) &#125;&#125;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">textDecoration:</span> <span class="hljs-string">&#x27;none&#x27;</span>, color: <span class="hljs-string">&#x27;inherit&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/men&#x27;</span>&gt;</span>Men<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>&#123;menu === &quot;men&quot; ? <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;animated-hr&quot;</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;hidden-hr&quot;</span> /&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;menu</span> === <span class="hljs-string">&quot;women&quot;</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125; <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; setMenu(&quot;women&quot;) &#125;&#125;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">textDecoration:</span> <span class="hljs-string">&#x27;none&#x27;</span>, color: <span class="hljs-string">&#x27;inherit&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/women&#x27;</span>&gt;</span>Women<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>&#123;menu === &quot;women&quot; ? <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;animated-hr&quot;</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;hidden-hr&quot;</span> /&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;menu</span> === <span class="hljs-string">&quot;kids&quot;</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125; <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; setMenu(&quot;kids&quot;) &#125;&#125;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">textDecoration:</span> <span class="hljs-string">&#x27;none&#x27;</span>, color: <span class="hljs-string">&#x27;inherit&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/kids&#x27;</span>&gt;</span>Kids<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>&#123;menu === &quot;kids&quot; ? <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;animated-hr&quot;</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;hidden-hr&quot;</span> /&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;nav-login-cart&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">textDecoration:</span> <span class="hljs-string">&#x27;none&#x27;</span>, color: <span class="hljs-string">&#x27;inherit&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/login&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">textDecoration:</span> <span class="hljs-string">&#x27;none&#x27;</span>, color: <span class="hljs-string">&#x27;inherit&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/cart&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;cart_icon&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;nav-cart-count&quot;</span>&gt;</span></span><br><span class="language-xml">          0</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  )</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>让我们来拆解这个代码块，首先这个代码实现了一个导航栏的组件，点击切换页面。以及一个cart的图标。</p><h2 id="tab切换页面"><a href="#tab切换页面" class="headerlink" title="tab切换页面"></a>tab切换页面</h2><ol><li>我们希望通过列表实现tab切换页面<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">ul</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;<br>&lt;/<span class="hljs-selector-tag">ul</span>&gt;<br><br><br>style:<br>.nav-menu &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#626262</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>&#125;<br><br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-tag">li</span> &#123;<br>  //<span class="hljs-attribute">flex</span>默认横向排列<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br><br>  //水平垂直居中<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  //<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">3px</span>;<br>  //点击效果<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br></code></pre></td></tr></table></figure>通过list style更改list默认的点，最后使用cursor: pointer优化点击效果。</li></ol><h2 id="navbar-跳转"><a href="#navbar-跳转" class="headerlink" title="navbar 跳转"></a>navbar 跳转</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;menu</span> === <span class="hljs-string">&quot;shop&quot;</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125; <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; setMenu(&quot;shop&quot;) &#125;&#125;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">textDecoration:</span> <span class="hljs-string">&#x27;none&#x27;</span>, color: <span class="hljs-string">&#x27;inherit&#x27;</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/&#x27;</span>&gt;</span>Shop<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>&#123;menu === &quot;shop&quot; ? <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;animated-hr&quot;</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;hidden-hr&quot;</span> /&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol><li>className指的是如果menu等于这个值那么这个list的class将被赋值active</li><li><code>setMenu(&quot;shop&quot;)</code>当我们点击的时候设置menu值为本项id，根据<code> const [menu, setMenu] = useState(&quot;shop&quot;)</code></li><li><code>&lt;Link style=&#123;&#123; textDecoration: 'none', color: 'inherit' &#125;&#125; to=&#39;/&#39;&gt;Shop&lt;/Link&gt;</code>首先我们保证link不会影响style，to后面是需要跳转的url</li><li><code>&#123;menu === &quot;shop&quot; ? &lt;hr className=&quot;animated-hr&quot; /&gt; : &lt;hr className=&quot;hidden-hr&quot; /&gt;&#125;</code>就是hr展开的一个动画<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-class">.animated-hr</span> &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#FF4141</span>;<br>  <span class="hljs-attribute">transition</span>: width <span class="hljs-number">0.5s</span>;<br>&#125;<br><br><br><span class="hljs-selector-class">.nav-menu</span> <span class="hljs-selector-class">.hidden-hr</span> &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#FF4141</span>;<br>  <span class="hljs-attribute">transition</span>: width <span class="hljs-number">0.5s</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="btn效果"><a href="#btn效果" class="headerlink" title="btn效果"></a>btn效果</h2><p><img src="/img/login-cart-btn.png" alt="btn">  </p><h3 id="单线btn"><a href="#单线btn" class="headerlink" title="单线btn"></a>单线btn</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.nav-login-cart</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">157px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#7a7a7a</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">75px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#515151</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>  <span class="hljs-attribute">background-color</span>: white;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.nav-login-cart</span> <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f3f3f3</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="cart-icon以及右上角红色提醒"><a href="#cart-icon以及右上角红色提醒" class="headerlink" title="cart icon以及右上角红色提醒"></a>cart icon以及右上角红色提醒</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.nav-cart-count</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">22px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">22px</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  //主要靠这两个实现右上角显示<br>  <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">35px</span>;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">55px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">11px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">background</span>: red;<br>  <span class="hljs-attribute">color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="如果我们不想某个组件在全局显示"><a href="#如果我们不想某个组件在全局显示" class="headerlink" title="如果我们不想某个组件在全局显示"></a>如果我们不想某个组件在全局显示</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">ConditionalNavbar</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br>  <span class="hljs-comment">// 指定需要显示 Navbar 的路径</span><br>  <span class="hljs-keyword">const</span> showNavbarPaths = [<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;/men&#x27;</span>, <span class="hljs-string">&#x27;/women&#x27;</span>, <span class="hljs-string">&#x27;/kids&#x27;</span>, <span class="hljs-string">&#x27;/cart&#x27;</span>];<br><br>  <span class="hljs-keyword">return</span> showNavbarPaths.<span class="hljs-title function_">includes</span>(location.<span class="hljs-property">pathname</span>) ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> /&gt;</span></span> : <span class="hljs-literal">null</span>;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 条件渲染 Navbar */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ConditionalNavbar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Shop</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/men&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">ShopCategory</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;men&quot;</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/women&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">ShopCategory</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;women&quot;</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/kids&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">ShopCategory</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;kids&quot;</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/product&#x27;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;:productId&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Product</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/cart&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Cart</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/login&#x27;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">LoginSignup</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Transformer and BERT</title>
    <link href="/2024/06/01/Transformer-and-BERT/"/>
    <url>/2024/06/01/Transformer-and-BERT/</url>
    
    <content type="html"><![CDATA[<h1 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h1><p>RNN&#x2F;LSTM可以解决输入输出的问题，然后attention被设计去解决瓶颈问题。然而人们发现，既然我可以直接根据attention layer来算出权重，那为什么还要顺序输入呢，于是有了transformer，encoder使用self-attention。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>任何输入输出文本类的任务（QA, machine traslation，LM）</p><h2 id="Position-Embedding"><a href="#Position-Embedding" class="headerlink" title="Position Embedding"></a>Position Embedding</h2><p>如果我们不顺序输入文章，那么我们怎么获取位置信息，transformer使用position embedding获取位置信息</p><blockquote><p>要求：相同位置应该有相同的表示符，无论输入有多长  </p></blockquote><h3 id="1-尝试直接用index填满embedding"><a href="#1-尝试直接用index填满embedding" class="headerlink" title="1. 尝试直接用index填满embedding"></a>1. 尝试直接用index填满embedding</h3><p><img src="/img/transformer-3.png"><br>整数增长过快，我们要让position embedding和word embedding相加，如果position embedding太大就稀释了word embedding。比如说第10,000个单词 （9999,9999,9999,9999）太大了</p><h3 id="2-我们尝试用当前位置占总长百分比来填满embedding"><a href="#2-我们尝试用当前位置占总长百分比来填满embedding" class="headerlink" title="2. 我们尝试用当前位置占总长百分比来填满embedding"></a>2. 我们尝试用当前位置占总长百分比来填满embedding</h3><p><img src="/img/transformer-4.png"><br>一个很明显的问题，同样的位置的positional embedding不一样了，即使它解决了稀释的问题 range（0，1）</p><h3 id="3-周期函数"><a href="#3-周期函数" class="headerlink" title="3. 周期函数"></a>3. 周期函数</h3><p><img src="/img/transformer-5.png"><br>同时解决了稀释和位置唯一标识符的问题（分奇偶是为了防止负数的存在）<br><img src="/img/transformer-51.png"><br><img src="/img/transformer-6.png">   </p><h2 id="一些关于transformer的超参数"><a href="#一些关于transformer的超参数" class="headerlink" title="一些关于transformer的超参数"></a>一些关于transformer的超参数</h2><h3 id="num-stacks-num-layers"><a href="#num-stacks-num-layers" class="headerlink" title="num_stacks (num_layers)"></a>num_stacks (num_layers)</h3><p><img src="/img/transformer-2.png"><br>简单来说就是几个encoder或者decoder相叠加</p><h3 id="num-heads-（multi-head-attention）"><a href="#num-heads-（multi-head-attention）" class="headerlink" title="num_heads （multi-head attention）"></a>num_heads （multi-head attention）</h3><p>我们这里使用的attention有别于我们最初讲解的attention，但他们的本质是一样的。都是希望通过相似度获得<strong>权重</strong>。<br>我们有三个矩阵，分别是wk,wq,wv（分别代表key, query, vector）和输入的矩阵相乘我们可以获得对应的k,q,v。<br><img src="/img/transformer-7.png"><br><img src="/img/transformer-8.png"><br><img src="/img/transformer-9.png"><br>可以看到在计算相似度的时候是包括自己的k的<br>值得注意的是，wk,wq,wv的初始随机值是不同的（在不同head里面），因此在训练过程中每一个head所负责获取的信息部分其实是不同的。<br><img src="/img/transformer-10.png"><br><img src="/img/transformer-11.png"><br><img src="/img/transformer-12.png"><br>重复注意力计算 num_head 次（图中 8 次）并 concatenate 链接结果。使用Weight W 乘以链接后的结果知识蒸馏降为到 Z matrix。将结果输入到下一层，整个过程再重复 num_stack 次（图中 6 次。<br><strong>注意 position encoding只需要最开始做一次，后面不用再做</strong></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>其实是一些实践上的优化，解释性不是那么高，原理凑合看。</p><h3 id="Residual-Connection"><a href="#Residual-Connection" class="headerlink" title="Residual Connection"></a>Residual Connection</h3><p><img src="/img/transformer-13.png"><br>通过叠加模型的输入和输出使得上层信息得到一定的保留，同时保证了训练的平稳度，<strong>增加模型准确度</strong>。</p><h3 id="Layer-Normalization"><a href="#Layer-Normalization" class="headerlink" title="Layer Normalization"></a>Layer Normalization</h3><p><img src="/img/transformer-14.png"><br>通过 Normalization 去除突出的无效梯度，<strong>加快训练速度</strong>。（否则需要多次iteration 才可以收敛）</p><h1 id="BERT-（pre-trained-language-model）"><a href="#BERT-（pre-trained-language-model）" class="headerlink" title="BERT （pre-trained language model）"></a>BERT （pre-trained language model）</h1><blockquote><p>mask + next setence prediction</p></blockquote><h2 id="基础理论：transfer-learning"><a href="#基础理论：transfer-learning" class="headerlink" title="基础理论：transfer learning"></a>基础理论：transfer learning</h2><p>CV 界最初证明了 transfer learning 的可行性，指原本用于任务 A 的模型可以稍加调整适配于任务 B（需要相同任务类型但是不同数据&#x2F;标签。<br>我们之前讨论仅集中在 pretrained word embeddings，具体模型还需要针对任务从头训练，这节课往后着重讨论 pretrained whole models。  </p><h2 id="已经见过的预训练模型：Byte-Pair-Encoding"><a href="#已经见过的预训练模型：Byte-Pair-Encoding" class="headerlink" title="已经见过的预训练模型：Byte-Pair-Encoding"></a>已经见过的预训练模型：Byte-Pair-Encoding</h2><p>主要是用来通过拆分来理解词典中不存在的词（OOV issue）<br><img src="/img/transformer-15.png"><br>BPE 是一种预训练模型，通过在大文本预训练生成词典，然后使用预训练的词典配合 MaxMatch 等算法拆分测试文本单词。</p><h2 id="其他模型"><a href="#其他模型" class="headerlink" title="其他模型"></a>其他模型</h2><p><img src="/img/transformer-16.png">  </p><h2 id="Model-pretraining-architectrue"><a href="#Model-pretraining-architectrue" class="headerlink" title="Model pretraining architectrue"></a>Model pretraining architectrue</h2><p>把初始随机分配的权重替换为预训练好的权重，根据模型架构分为 encoders，encoder-decoders，decoders，训练过程主要分为pretrianing以及finetuning(on your task)<br><img src="/img/transformer-17.png">  </p><h3 id="Encoder-only"><a href="#Encoder-only" class="headerlink" title="Encoder only"></a>Encoder only</h3><h4 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h4><p>BERT（Bidirectional Encoder Representations from Transformers）是一个由Google提出的预训练语言模型，它在自然语言处理（NLP）领域取得了显著的成果。BERT的关键特性在于它能够捕捉上下文信息，通过双向的Transformer架构来学习词汇和句子之间的复杂关系。<br><img src="/img/transformer-18.png">  </p><ul><li>BERT的主要特点</li></ul><ol><li><p><strong>双向性</strong>：</p><ul><li>BERT通过使用双向Transformer编码器同时从左到右和从右到左进行训练，从而捕捉到更多的上下文信息。传统的单向语言模型只能从一个方向捕捉上下文信息，而BERT则可以更全面地理解句子。</li></ul></li><li><p><strong>预训练和微调</strong>：</p><ul><li>BERT采用预训练和微调相结合的方式。首先，在大规模的无监督文本数据上进行预训练，然后在具体的任务上进行有监督的微调。这个过程使得BERT能够在多种NLP任务上表现出色。</li></ul></li><li><p><strong>掩码语言模型（Masked Language Model, MLM）</strong>：</p><ul><li>在预训练阶段，BERT使用掩码语言模型（MLM）来预测被掩盖的词汇。这种方式让模型能够基于上下文信息预测词汇，从而增强对上下文的理解。</li></ul></li><li><p><strong>下一句预测（Next Sentence Prediction, NSP）</strong>：</p><ul><li>BERT还使用了下一句预测任务，模型需要预测两段文本是否连续。这有助于理解句子之间的关系，提升在问答和自然语言推理任务上的表现。</li></ul></li></ol><ul><li>BERT的架构</li></ul><p>BERT的架构基于Transformer的编码器部分，具体结构如下：</p><ol><li><p><strong>输入表示</strong>：</p><ul><li>输入由词嵌入、位置嵌入和段落嵌入三部分组成。词嵌入表示词汇，位置嵌入表示词在句子中的位置，段落嵌入用于区分不同的段落。</li></ul></li><li><p><strong>多层Transformer编码器</strong>：</p><ul><li>BERT由多个Transformer编码器堆叠而成，每个编码器层包括多头自注意力机制和前馈神经网络。BERT-base有12层编码器，BERT-large有24层编码器。<br><img src="/img/transformer-19.png"><br>[pic]</li></ul></li></ol><h4 id="SpanBERT"><a href="#SpanBERT" class="headerlink" title="SpanBERT"></a>SpanBERT</h4><p>通过mask连续的单词而不是分散的单词提升性能（一般的BERT会随机mask单词）<br><img src="/img/transformer-20.png">  </p><h4 id="RoBERTa"><a href="#RoBERTa" class="headerlink" title="RoBERTa"></a>RoBERTa</h4><p>仅使用mask words预训练模型而不使用NSP，并且尽量使用更多的epoch和data训练，大力出奇迹  </p><h4 id="ALBERT"><a href="#ALBERT" class="headerlink" title="ALBERT"></a>ALBERT</h4><p><img src="/img/transformer-21.png">  </p><ol><li>不同层级使用相同的参数</li><li>ALBERT（A Lite BERT）是BERT的一个改进版本，主要通过参数共享和矩阵分解来减少模型参数量，从而提升效率。ALBERT引入了一种称为“系数投影”（Factorized Embedding Parameterization）的技术，用于减少词嵌入参数的数量。</li></ol><ul><li>系数投影（Factorized Embedding Parameterization）</li></ul><p>在BERT中，词嵌入矩阵的大小为V* H，其中 V 是词汇表的大小，H 是隐藏层的维度。对于大型词汇表和高维度的隐藏层，这个词嵌入矩阵会非常大，占用大量参数。</p><p>ALBERT通过将这个大矩阵分解为两个更小的矩阵来减少参数量：</p><ul><li>一个大小为 V * E 的矩阵（词汇表大小乘以词嵌入维度）</li><li>一个大小为 E * H 的矩阵（词嵌入维度乘以隐藏层维度）</li></ul><p>其中，E 是词嵌入的维度，它通常比隐藏层的维度 H 小得多。通过这种方式，参数总数从 V * H 降低到 V * E + E * H。</p><ul><li>为什么要使用系数投影？</li></ul><ol><li><p><strong>减少参数量</strong>：</p><ul><li>直接使用 V * H 的词嵌入矩阵在大词汇表和高维度时会产生大量参数。通过系数投影，参数量大大减少，降低了存储和计算的需求。</li></ul></li><li><p><strong>提升效率</strong>：</p><ul><li>较少的参数意味着更少的内存占用和更快的计算速度，有助于在资源有限的设备上部署模型。</li></ul></li></ol><ul><li>简单示例</li></ul><p>假设我们有一个词汇表大小为 30,000，隐藏层维度为 768，而我们希望将词嵌入维度设为 128。使用BERT的直接词嵌入和ALBERT的系数投影来比较参数量：</p><ol><li><p><strong>BERT的词嵌入矩阵</strong>：</p><p>参数量 &#x3D; V * H &#x3D; 30,000 * 768 &#x3D; 23,040,000</p></li><li><p><strong>ALBERT的系数投影</strong>：</p><p>参数量 &#x3D; V * E + E * H &#x3D; 30,000 * 128 + 128 * 768 &#x3D; 3,840,000 + 98,304 &#x3D; 3,938,304</p></li></ol><p>通过系数投影，参数量从23,040,000减少到3,938,304，显著降低了计算资源需求。  </p><h4 id="LongFormer"><a href="#LongFormer" class="headerlink" title="LongFormer"></a>LongFormer</h4><p>通过优化传统的Transformer降低计算量&#x2F;文本长度的比例从平方到2线性，从而运行transformer在有限的加算量内处理更长的文本输入。<br><img src="/img/transformer-22.png">  </p>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>contextual representation-2 Attention</title>
    <link href="/2024/05/31/contextual-representation-2-Attention/"/>
    <url>/2024/05/31/contextual-representation-2-Attention/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本文的顺序和课程内容有很大出入，改变顺序纯属为了便于理解，可能会遗漏小部分知识点</p></blockquote><h1 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h1><p>为了理解什么是attention，我们先引入一个task：Machine translation(值得注意的时NLP的基本问题都和这个例子中提到的encoder以及decoder有关，因此不要仅关注于Machine translation)</p><h2 id="Machine-Translation"><a href="#Machine-Translation" class="headerlink" title="Machine Translation"></a>Machine Translation</h2><h3 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a>任务目标</h3><p>translate a sentence x from one language (source language) to a sentence t in another language(target language)</p><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>冷战时期美苏互相翻译，产生了Rule-base方法，其内容不是很通顺</p><h3 id="Statistical-machine-translation"><a href="#Statistical-machine-translation" class="headerlink" title="Statistical machine translation"></a>Statistical machine translation</h3><p><img src="/img/attention-align1.png"><br><img src="/img/attention-align2.png"><br>可以发现，我们主要训练了两个模型，分别是translation model(不在乎输出内容的流畅性)，以及language model(流畅输出内容)</p><h4 id="Translation-model的主要挑战：Text-alignment"><a href="#Translation-model的主要挑战：Text-alignment" class="headerlink" title="Translation model的主要挑战：Text alignment"></a>Translation model的主要挑战：Text alignment</h4><p>使用parallel corpus双语训练集，我必须要知道双语文本之间的具体对应关系<br><img src="/img/attention-align3.png"><br>然而，语言的不同使得它会出现一对零，一对一，一对多，多对一等多种情况<br><img src="/img/attention-align4.png"><br>其实就是训练一个classification模型，使其确定源文本在目标文本的启示位置。</p><h4 id="Language-Model"><a href="#Language-Model" class="headerlink" title="Language Model"></a>Language Model</h4><p>我们可以使用N-gram或者RNN等模型来实现语言模型。<br><img src="/img/attention-teacher.png"><br>回忆RNN，我们最早会把每一个节点的输入作为下一个节点的输出，但这会导致error propagation. 因此我们需要<strong>Teacher forcing</strong>。要强制每一个节点的输入都是正确的。</p><h3 id="Nerual-Machine-Translation"><a href="#Nerual-Machine-Translation" class="headerlink" title="Nerual Machine Translation"></a>Nerual Machine Translation</h3><p>我们原本的模型be like： Chinese -&gt; broken eng -&gt; eng, 我们为什么还需要broken eng呢？因此我们应该把它改为机器更容易理解的encode。所以目前的NN机器翻译主要有encoder和decoder两个部分，并且这样可以高度模块化，可以在应对不同语言时只训练decoder或者只训练encoder。  </p><h4 id="Bottle-neck-problem"><a href="#Bottle-neck-problem" class="headerlink" title="Bottle-neck problem"></a>Bottle-neck problem</h4><p>回顾RNN以及LSTM，encode就是隐藏层的最后输出，然而他的大小有限，尽管LSTM在某种程度上缓解了RNN的梯度消失的问题，但是无法解决Memory大小有限的问题。这个问题我们称之为： <strong>Bottle-neck problem</strong><br><img src="/img/attention-sb1.png">  </p><h4 id="How-to-solve-the-information-bottle-neck-issue"><a href="#How-to-solve-the-information-bottle-neck-issue" class="headerlink" title="How to solve the information bottle-neck issue?"></a>How to solve the information bottle-neck issue?</h4><p><img src="/img/attention-sb.png"><br>我们在训练decoder的时候时刻关注着真实输入，这就是Attention的基本原理，我将在下面展开讲解attention</p><h4 id="训练数据有限？-low-resource-language-dataset"><a href="#训练数据有限？-low-resource-language-dataset" class="headerlink" title="训练数据有限？ low-resource language dataset?"></a>训练数据有限？ low-resource language dataset?</h4><p>结合多语言输入，使用word sense disambiguation辅助翻译</p><h3 id="如何评估翻译结果-Evaluation"><a href="#如何评估翻译结果-Evaluation" class="headerlink" title="如何评估翻译结果 Evaluation"></a>如何评估翻译结果 Evaluation</h3><ul><li>BLEU - 内容重叠法<br>根据对比翻译输出和人工翻译参考的重叠情况<br><img src="/img/attention-eva1.png"><br><img src="/img/attention-eva2.png"><br>最后的这种方法比较常用</li><li>模型测评法<br>Vector Distance，测试模型和人工输出的翻译embedding相似度<blockquote><p>e.g.BERTscore 通过 BERT生成模型和人工输出的embedding对比相似度</p></blockquote></li></ul><h2 id="Attention-1"><a href="#Attention-1" class="headerlink" title="Attention"></a>Attention</h2><p>attention其实就是一个对encoder,decoder的隐藏层进行相似度计算，来获得不同输入的权重（这是最基本的attention，后面还有很多变种）</p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>像上面说的，梯度消失和瓶颈问题</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>On each step of the decoder, use direct connection to the encoder to focus on a particular part of the input sequence.</p><h3 id="Attention-在sequence-model中的使用"><a href="#Attention-在sequence-model中的使用" class="headerlink" title="Attention 在sequence model中的使用"></a>Attention 在sequence model中的使用</h3><p>回到我们前面讲的macine translate的问题上我们使用RNN&#x2F;LSTM sequence model去解决encoder以及decoder问题。<br><img src="/img/attention-sm1.png"><br><img src="/img/attention-sm2.png"><br>我们的decoder不再仅仅使用单一的encoder输出向量最为训练的输入，在这个例子中，我们只是简单的把每一个隐藏层计算点积相似度，送入softmax层输出每个输入的概率（也就是attention）<br>在最后的输出中也就是，decoder的输出中我们concatenate attention output with decoder hidden state</p><h3 id="Attention的优点"><a href="#Attention的优点" class="headerlink" title="Attention的优点"></a>Attention的优点</h3><p><img src="/img/attention-advan.png">  </p><h3 id="Attention更广泛的定义"><a href="#Attention更广泛的定义" class="headerlink" title="Attention更广泛的定义"></a>Attention更广泛的定义</h3><p>给⼀组向量value和⼀个向量query，Attention是⼀种根据查询来计算向量值加权和的技术<br><img src="/img/attention-general.png">  </p><h3 id="Attention变种"><a href="#Attention变种" class="headerlink" title="Attention变种"></a>Attention变种</h3><p><img src="/img/attention-types.png">  </p><h3 id="不同的Attention机制"><a href="#不同的Attention机制" class="headerlink" title="不同的Attention机制"></a>不同的Attention机制</h3><p><img src="/img/attention-gls1.png">  </p><ul><li>Global: attending to the entire input state space.</li><li>Local: Attending to the part of input state space.</li></ul><h4 id="Self-attention"><a href="#Self-attention" class="headerlink" title="Self-attention"></a>Self-attention</h4><p><img src="/img/attention-gls2.png"><br>普通的attention是关联decoder的每⼀个output到encoder的每⼀个input，Self-attention是在同⼀句话的每⼀个输出关联到本句话的所有输⼊。</p><h3 id="一些架构"><a href="#一些架构" class="headerlink" title="一些架构"></a>一些架构</h3><h4 id="Bi-Directional-Attention-Flow（Bi-DAF）"><a href="#Bi-Directional-Attention-Flow（Bi-DAF）" class="headerlink" title="Bi-Directional Attention Flow（Bi-DAF）"></a>Bi-Directional Attention Flow（Bi-DAF）</h4><p><img src="/img/attention-bidaf.png">  </p><ol><li><p>输入层<br>输入层包含上下文和问题的嵌入表示。可以使用预训练的词嵌入（如GloVe或Word2Vec）或通过模型内的嵌入层来获得。</p></li><li><p>词嵌入层<br>对上下文和问题的词嵌入进行处理。通常使用字符级别的嵌入来增强词嵌入表示。</p></li><li><p>上下文编码层<br>使用双向LSTM或GRU对上下文和问题的词嵌入进行编码，捕获每个词在其上下文中的语义信息。</p></li><li><p>注意力流层<br>这是BiDAF模型的核心部分，通过计算上下文和问题之间的相似度矩阵来实现双向注意力。</p></li></ol><ul><li><strong>问题到上下文注意力（Question-to-Context Attention）</strong>：突出与问题密切相关的上下文词。</li><li><strong>上下文到问题注意力（Context-to-Question Attention）</strong>：强调问题中与当前上下文片段相关的重要词。</li></ul><ol start="5"><li><p>建模层<br>通过将双向注意力流的结果和原始上下文编码结合起来，再次通过双向LSTM或GRU进行处理，捕捉高阶交互信息。</p></li><li><p>输出层<br>最终通过输出层来预测答案的起始和结束位置。</p></li></ol><h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h4><p><img src="/img/attention-trans.png">  </p><h4 id="LLM"><a href="#LLM" class="headerlink" title="LLM"></a>LLM</h4><p><img src="/img/attention-llm.png">  </p>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Contextual representation-1</title>
    <link href="/2024/05/31/Contextual-representation-1/"/>
    <url>/2024/05/31/Contextual-representation-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Contextual-representation"><a href="#Contextual-representation" class="headerlink" title="Contextual representation"></a>Contextual representation</h1><h3 id="之前学习的embedding的局限性-包括word2vec以及TFIDF"><a href="#之前学习的embedding的局限性-包括word2vec以及TFIDF" class="headerlink" title="之前学习的embedding的局限性(包括word2vec以及TFIDF)"></a>之前学习的embedding的局限性(包括word2vec以及TFIDF)</h3><p>每个单词仅有唯一的向量表示，不能区分不同语境下的semantic</p><blockquote><p>解决方案：我们需要基于上下文动态生成词向量(embedding)</p></blockquote><h2 id="基于RNN的contextual-representation"><a href="#基于RNN的contextual-representation" class="headerlink" title="基于RNN的contextual representation"></a>基于RNN的contextual representation</h2><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>把<strong>RNN的隐藏层</strong>作为“实时词向量”，因为它包含了语序的信息<br>我们可以发现，它的隐藏层是通过tanh激活函数激活 concat前一个state以及输入的vector（一般是one-hot）<br><img src="/img/contextual-rnn.png">   </p><h2 id="双向RNN"><a href="#双向RNN" class="headerlink" title="双向RNN"></a>双向RNN</h2><p>词向量不仅和前文有关，也和后文有关，因此我们使用双向rnn分别获取前后文信息并合并(注意，这里的分别获取非常重要，这是和transformer的注意力机制最大区别的地方，在后文会详细讲解)<br><img src="/img/contextual-birnn.png"><br>因为是需要输入后产生的新的state，可以注意一下它最后作为结果的到底是哪个state</p><h2 id="ELMo-embeddings-from-language-models"><a href="#ELMo-embeddings-from-language-models" class="headerlink" title="ELMo(embeddings from language models)"></a>ELMo(embeddings from language models)</h2><h3 id="双层LSTM-双向LSTM"><a href="#双层LSTM-双向LSTM" class="headerlink" title="双层LSTM 双向LSTM"></a>双层LSTM 双向LSTM</h3><p>首先我们要回忆在讲解CNN的时候，我们说CNN通常用来捕获char级别的embedding用来生成word embedding，在max pooling中我们选取每个dimension中optimal value来获得不同部分的表示向量（eg. 我们的输出向量有三个dimension，可以分别代表一个word的词根，前缀以及后缀）</p><blockquote><p>优点: 对比one-hot encoding降低了向量维度，同时解决了unknown words的问题（当我在生成embedding的时候直接输入word，即可生成embedding无论我的train set中有没有）  </p></blockquote><p><img src="/img/contextual-cnn.png">   </p><p>我们可以看到双层LSTM有三层，分别是embedding层（CNN层），以及两层LSTM<br><img src="/img/contextual-lstm.png"><br>然后我们把同一个输入的正向和反向拼在一起，我们有三个weights，这三个权重需要根据任务类型训练<br>final vector &#x3D; s0 * x0 + s1 * x1 + s2 * x2<br>不同任务的权重不同，比图更看重语法的任务低层的权重就会更高（pos tagging），更看重语义的任务高层的权重就会更高（情感分析）</p><h3 id="ELMo有效性"><a href="#ELMo有效性" class="headerlink" title="ELMo有效性"></a>ELMo有效性</h3><p>作为提高embedding的方式，ELMo的有效性还是很高的<br><img src="/img/contextual-validation.png">   </p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ol><li>RNN&#x2F;LSTM必须顺序计算，无法并行计算，最多双线程并行（正反）</li><li>只能分别获得两个方向的信息并拼在一起，不能同时获得两个方向的信息（比如前面也否定后面也否定但双重否定是肯定，语义在语境中往往非常复杂，不能只考虑一个方向）</li></ol><h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h2><p>因此我们引入注意力机制来同时获取前后语境信息</p>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Distributional semantics</title>
    <link href="/2024/05/07/Distributional-semantics/"/>
    <url>/2024/05/07/Distributional-semantics/</url>
    
    <content type="html"><![CDATA[<p>我们希望可以从corpus中自动学习词的意思而不需要人工标注的数据集<br><strong>Distributional hypothesis: 利用单词context来描述词义</strong><br>目前的Distributional semantics分为两大类，和之前提到的embedding中一样是count-based和Neuron based</p><h1 id="Count-based"><a href="#Count-based" class="headerlink" title="Count-based"></a>Count-based</h1><h2 id="Use-document-as-context"><a href="#Use-document-as-context" class="headerlink" title="Use document as context"></a>Use document as context</h2><p>主要是TD-IDF和SVD的细节<br><img src="/img/tfidf.png" alt="tfidf"><br>不管是TF还是TD-IDF都是基于Vector Space Model</p><h3 id="Term-frequency"><a href="#Term-frequency" class="headerlink" title="Term frequency"></a>Term frequency</h3><p>对于TF来说，每个col代表一个word，每个row代表一个doc</p><h3 id="Inverse-document-frequency"><a href="#Inverse-document-frequency" class="headerlink" title="Inverse document frequency"></a>Inverse document frequency</h3><p>$$<br>i d f_w&#x3D;\log \frac{|D|}{d f_w}<br>$$</p><ul><li>|D|: total number of documents</li><li>dfw: number of documents that has word(w)<br>所以说如果，单词在不同的doc中出现的越多那么idf越小<br>通过看同一个单词出现在不同doc中里的次数来惩罚TF<br>TF-IDF &#x3D; TF * IDF  <blockquote><p>在这里我们只讨论常规版本的TF-IDF，会有其它版本可以smoothing（TF-IDF可以使用sklearn.TfidfVecorizer()）</p></blockquote></li></ul><h3 id="Dimensionality-Reduction"><a href="#Dimensionality-Reduction" class="headerlink" title="Dimensionality Reduction"></a>Dimensionality Reduction</h3><ul><li><p><strong>Singular Value Decomposition:</strong> SVD向量降维，加速运算去除Noise<br><img src="/img/SVD.png" alt="SVD"><br><strong>无损压缩</strong><br>把生成的Vector Space Model拆成三个矩阵，分别是word embedding（new term matrix），连接矩阵，以及doc embedding (new document matrix)<br>线性独立：大概就是行不能约分比如 (1,0,0) (2,0,0)是一样的</p></li><li><p><strong>Latent semantic analysis:</strong> 取前k维，作为word vector，潜在词义分析<br><img src="/img/lsa.png" alt="lsa"><br><strong>有损压缩</strong><br>取前k维就是只取前一部分的简单关系，而放弃深层关系，因为很多任务只需要word之间的少量关系</p></li></ul><p>完整的TF-IDF流程：tfidf matrix -&gt; SVD -&gt; U-&gt; pick k -&gt; 只保留前k维 -&gt; word embedding -&gt; LSTM </p><h2 id="Word-as-Context"><a href="#Word-as-Context" class="headerlink" title="Word as Context"></a>Word as Context</h2><p><img src="/img/content-freq.png"><br><img src="/img/mpi.png" alt="pmi"><br>表中是单词出现在context中的频率，具体多近才是context需要被提前定义<br>和TF相同的是，the这样的common words的问题也会出现   </p><h3 id="Pointwise-Mutual-Information"><a href="#Pointwise-Mutual-Information" class="headerlink" title="Pointwise Mutual Information"></a>Pointwise Mutual Information</h3><p>How much sense shared<br>$$<br>\operatorname{PMI}(x, y)&#x3D;\log _2 \frac{P(x, y)}{P(x) P(y)}<br>$$<br>在一起存在的次数越多意味着 sense shared多关系就大</p><blockquote><p>补充：</p></blockquote><ol><li>将-inf或者负数替换成0  </li><li>Normalised PMI: PMI(x, y)&#x2F; -logP(x, y)  </li><li>PMI也可以做SVD简化</li></ol><h1 id="NN-based-word2vec"><a href="#NN-based-word2vec" class="headerlink" title="NN-based(word2vec)"></a>NN-based(word2vec)</h1><blockquote><p>其实就是通过context来优化参数获取embedding  </p></blockquote><p>word2vec是一种Neural based distributional semantic，他的主要思想就是predict a word using context words(或者反过来)<br>具体包括两种实现方法，他们是反过来的下面主要用SG举例原理架构<br><img src="/img/context-eg.png">  </p><ul><li>Skip-gram Model(SG): predict surounding words with target word</li><li>Continuous Bag-of-Words(CBOW): predict target word using surrounding words</li></ul><p>实践上来讲，SG更适合低频词，CBOW更适合高频词（同时需要定义超参数context window, 图中L&#x3D;2）</p><h2 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h2><p>我们需要通过NN的输出也就是是否为context的概率来不断优化参数（也就是embedding），那么我们怎么获得Prob of context words呢<br>$$<br>P\left(c_j \mid w_i\right)&#x3D;\frac{\exp \left(p\left(w_i\right) \cdot v_j\right)}{\sum_{k&#x3D;1}^5 \exp \left(p\left(w_i\right) \cdot v_k\right)}<br>$$<br>根据softmax概率分布我们可以把概率看作P(word | context)<br><img src="/img/prob_for.png">     </p><blockquote><p>Note：我们假设context之间是相互独立的</p></blockquote><h3 id="我们如何把概率计算转化成神经网络"><a href="#我们如何把概率计算转化成神经网络" class="headerlink" title="我们如何把概率计算转化成神经网络"></a>我们如何把概率计算转化成神经网络</h3><p>首先我们要知道，在计算的过程中我们需要两个embedding matrix分别是target word embedding, 以及context word embedding.<br>我们可以把计算概率的过程看作以下网络（其实和普通的NN还是有区别的）<br><img src="/img/w2v-struc.png"><br>Input: one hot vec<br>类似NN我们需要参数矩阵并通过激活函数获得Hidden layer，在这里我们不适用激活函数，而是直接使用权重矩阵形成projection layer（例如原始是10000维的onehot，想用300维表示，那么使用一个(10000,300)的权重矩阵相乘）<br>输出层的需要一个(300,10000)的权重矩阵，每一个输出都是一个prob（使用softmax）</p><ul><li>d: d就是embedding，d的维度就是embedding的维度，那么如何选择d？<br>Rank or hyper parameter tuning</li></ul><p>我们需要通过使正确的context word的概率最大来调整参数获得最优的embedding<br><font color=FF00000>问题：在传统的 Skip-gram 模型中，每个训练步骤涉及计算一个完整的 softmax 函数，该函数需要考虑词汇表中的每个单词，这在大词汇表中非常耗时。</font>  </p><h2 id="Regression-training优化方法"><a href="#Regression-training优化方法" class="headerlink" title="Regression training优化方法"></a>Regression training优化方法</h2><p>为了提高效率，我们希望把概率分布转化成binary classification问题</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>我们把所有words看作两个集合，分别是positive context 和 negative context，对于negative context我们随机选取一部分非context words作为negative sample<br>这会带来两个好处： </p><ol><li>我们希望class balance，这样可使#context&#x3D;#non-context</li><li>我们现在不需要在对所有词进行概率计算了，并且使用sigmoid而不是softmax</li></ol><h3 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss function"></a>Loss function</h3><p>p(+) &#x3D; sigmoid<br>p(-) &#x3D; 1-sigmoid<br><img src="/img/loss-emb.png"><br>对于正样本词（即真实的上下文词），我们希望这个概率越接近1越好；而对于负样本词，我们希望这个概率越接近0越好。（注意minimize and maximazie）<br><img src="/img/loss-prac.png"><br>通常情况下是一个正样本<br>优点：unsupervised，efficient<br><img src="/img/b-loss.png"></p><h3 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h3><ul><li>Word similarity：cosine similarity<br>计算两个词义相似的单词（well&amp;good）的embedding vector的cosine<br>similarity</li><li>Word analogy：operation in word embedding space<br>meal&#x3D;breakfest+lunch+dinner</li><li>Downstream tasks：evaluate the task performance<br>根据后续⽤到embedding的任务的性能来控制变量的反推embedding的效果</li></ul>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lexical semantics</title>
    <link href="/2024/05/07/Lexical-senmantics/"/>
    <url>/2024/05/07/Lexical-senmantics/</url>
    
    <content type="html"><![CDATA[<h1 id="Lexical-semantics"><a href="#Lexical-semantics" class="headerlink" title="Lexical semantics"></a>Lexical semantics</h1><ul><li>Semantics: 单词本身的含义 &#x3D;&gt; embedding， vector space （king - man + woman &#x3D; queen）</li><li>Bag of words的局限性：(a)无法捕捉词与词之间的关系; (b) Out of vocabulary(之前没有见过的词，大多数时间就相当于没有见过（当然存在解决方法），embedding可以猜出来词的意义)</li><li>lexical semantics: 表示词语之间关系的词典（不是用词本身构成句子，而是使用词的含义来代替单词构成句子）</li></ul><h2 id="如何表示词义"><a href="#如何表示词义" class="headerlink" title="如何表示词义"></a>如何表示词义</h2><ol><li>基于文字：通过此定中单词的定义来理解单词，然而<strong>定义本身也是由单词组成，所以想要理解定义的含义必须先学习定义中单词，这会导致陷入死循环</strong></li><li>基于关系：用 rule-based关系定义单词之间的关系<br><img src="/img/rule.png" alt="rule"><br><font color=FF7D00>问题:有些词会有很多词义，但有些只有一个</font></li></ol><h3 id="WordNet"><a href="#WordNet" class="headerlink" title="WordNet"></a>WordNet</h3><p>一个树结构的词典，每个单词的每一个sense都有对应的文字定义<br><img src="/img/wordnet.png" alt="wordnet"><br>在这里我们可以区分hypernym和meronym的区别，一个是逻辑上的包含一个是物理上的包含，相对应的hyponym和holonnym也是一样的</p><h3 id="Synset"><a href="#Synset" class="headerlink" title="Synset"></a>Synset</h3><p>WordNet中每⼀个node都是⼀个Synset⽽不是word，concept node上⾯的词&#x2F;label只是集合中的第⼀个词。</p><h2 id="Word-similarity"><a href="#Word-similarity" class="headerlink" title="Word similarity"></a>Word similarity</h2><p>在这里，我们将提出集中方法去计算词义相似度</p><ul><li><p><strong>基于路径长度</strong><br><img src="/img/len-formular.png" alt="len"><br>对于公式的解释： 首先分母上的1是为了使意思完全相同的单词的相似度为1（同时避免除以0），我们可以把第一个式子直接理解为词义相似度，第二个式子则是为了计算词语相似度（因为一个词与不止有一个意思），取最大值也就是最相似的<br><img src="/img/depth.png" alt="depth"><br><font color=FF7D00>问题:从上面的例子可以看出，这种方式无法正确反映词义的距离，词语越深应该edge越短</font>  </p></li><li><p><strong>基于深度</strong></p></li></ul><p>$$<br>\operatorname{simwup}\left(c_1, c_2\right)&#x3D;\frac{2 \times \operatorname{depth}\left(\operatorname{LCS}\left(c_1, c_2\right)\right)}{\operatorname{depth}\left(c_1\right)+\operatorname{depth}\left(c_2\right)}<br>$$  </p><p>分母：是这两个词本身的位置，代表了这两个词的含义有多精确<br>分子：LCS: lowest common sense, 代表了两个词最小的交集（root）</p><p><img src="/img/depth-eg.png" alt="depth"><br><font color=FF7D00>问题:同一个深度的单词edge也不一定相同，比如说，animal分为水生动物和哺乳动物，他们明显edge不同，因为他们的关系不是很简单的分割</font> </p><ul><li><strong>基于IC（Information Content）</strong><br>我们试图使用IC来代替数edge<br><img src="/img/IC.png" alt="ic"><br>在这里我们引入一个information content的概念，它使用Unigram prob来计算<br><img src="/img/IC-formular.png" alt="ic"><br>concept prob越大，频率越多词义越广，包含的东西越多<br>考试时没出现过overall root,但是很好理解是如果有一个root那他的P应该是1</li></ul><p>$$<br>\operatorname{simlin}\left(c_1, c_2\right)&#x3D;\frac{2 \times \operatorname{IC}\left(\operatorname{LCS}\left(c_1, c_2\right)\right.}{\operatorname{IC}\left(c_1\right)+\operatorname{IC}\left(c_2\right)}<br>$$</p><p><img src="/img/IC-eg.png" alt="ic"><br>注意他给的数是概率还是IC</p><h2 id="Word-sense-disambiguation"><a href="#Word-sense-disambiguation" class="headerlink" title="Word sense disambiguation"></a>Word sense disambiguation</h2><p>在这里我们思考一个任务，这个任务是判断句子中每一个词语的正确sense。<br>Baseline：choose the most common sense (无视content，选择最常用的释义)</p><p>以下提供两种方法来解决这个问题：</p><h3 id="Supervised-learning-approach"><a href="#Supervised-learning-approach" class="headerlink" title="Supervised learning approach"></a>Supervised learning approach</h3><p>Input: labelled corput and left context and right context<br>是一个classification model<br><font color=FF7D00>很难构造dataset，因为需要人工标注</font></p><h3 id="Unsupervised-learning-approach"><a href="#Unsupervised-learning-approach" class="headerlink" title="Unsupervised learning approach"></a>Unsupervised learning approach</h3><ol><li>Lesk: 检查词的context和sense定义的重叠成都（context和discription的单词重叠次数）</li><li>Clustering： 收集大量包含某个词的句子</li></ol><p>第二种方法存在问题:<br><font color=FF7D00>1.poor interpretability 2.need to match with definitions in a lexicon(在找出cluster之后仍然需要手动match sense，且大多数时间对不上)</font></p>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CNN, RNN, LSTM</title>
    <link href="/2024/05/06/CNN/"/>
    <url>/2024/05/06/CNN/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本章只考虑这些模型的基本框架，不需要细究</p></blockquote><h1 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h1><p><img src="/img/cnn.png" alt="cnn"><br>卷积神经网络for NLP的主要途径就是通过sliding window将句子拆分成sequence，最后输出一个sentence embedding的结构。<br>更多的在拼写层级使用CNN。 char vector-&gt; word embedding</p><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ol><li>生成word embedding</li><li>用sliding windows生成 subsequece of words</li><li>通过convolution把input vector降维</li><li>max-pooling在所有的sliding window生成的output vector中选择每个dimension的optimal value，生成一个最终代表整个sentence的vector representation</li><li>将vector representation输入后续节点进行关系捕捉（普通的NN）</li><li>通过后续NN的loss进行反向传播回到convolution中的para</li><li>从step3开始重复，直到loss收敛</li></ol><h1 id="Recurrent-NN-循环神经网络"><a href="#Recurrent-NN-循环神经网络" class="headerlink" title="Recurrent NN 循环神经网络"></a>Recurrent NN 循环神经网络</h1><p>在这里我们讨论的是最简单的RNN，只有一层hidden layer  </p><p>$$<br>s_i&#x3D;\tanh \left(W_s s_{i-1}+W_x x_i+b\right)<br>$$  </p><p><img src="/img/rnn.png" alt="rnn">  </p><p><strong>核心思路：</strong> 每次输入一个单词（而不是句子），同时保持之前的状态（有点像记忆之前的单词），每一个node的input是word以及state中的position信息。 <strong>input X可以无限长，eg.我有一个无限长的句子，但是state不需要和X的维度相同</strong>  </p><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><p><font color=FF00000>值得注意的是,RNN的这些节点是在同一层中，也就是他们共享parameters，因此，无论在哪个时间步上，RNN层的参数都是相同的。</font><br>Wx， Ws， Wy， b</p><h2 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h2><p><img src="/img/rnn-struc.png" alt="rnn-s">  </p><ul><li>每次只input一个 x value（vector）</li><li>同样的word在不同的time frame中会产生不同的output</li><li>计算Loss**L &#x3D; L(Y1)+L(Y2)+L(Y3)**：sum of loss at each time frame</li><li>backpropagation through time,更新所有的参数</li></ul><h2 id="RNN的问题"><a href="#RNN的问题" class="headerlink" title="RNN的问题"></a>RNN的问题</h2><ol><li>High traning cost 每一个node相比FFNN（Feedforward Neural Network也就是我们之前提到的最简单的NN模型）维度很高</li><li>因为有时间顺序，所以无法平行化计算</li><li>error propagation， 你必须在整个句子输入之后才能知道错误，unable to locate intermediant error</li><li>Vanish gradient</li></ol><h3 id="Vanish-gradient"><a href="#Vanish-gradient" class="headerlink" title="Vanish gradient"></a>Vanish gradient</h3><p><img src="/img/vanish.png" alt="vanish"><br>只记忆不遗忘，就导致本来重要的东西权重很低，对于RNN来说</p><h1 id="Long-Short-Term-Memory-Network"><a href="#Long-Short-Term-Memory-Network" class="headerlink" title="Long Short-Term Memory Network"></a>Long Short-Term Memory Network</h1><blockquote><p>本节中提到的模型在LLM出现之前位于统治地位，可以看看workshop是一个非常好的例子</p></blockquote><p>基于RNN的问题，我们需要一个可以遗忘的模型也就是LSTM<br><img src="/img/LSTM.png" alt="LSTM"><br>可以看到每个time frame同样的一个输出一个用于给下一个time node一个用于输出计算loss，与此同时把memory传递一个下一个node  </p><h2 id="怎么理解memory"><a href="#怎么理解memory" class="headerlink" title="怎么理解memory"></a>怎么理解memory</h2><p>在每一个time frame中，会输入一些信息并遗忘一些信息，这部分内容会在下面展开</p><h2 id="Memory详解"><a href="#Memory详解" class="headerlink" title="Memory详解"></a>Memory详解</h2><p>memory中有四个重要的步骤，分别是Forget, Input, Update以及Output  </p><h3 id="Forget"><a href="#Forget" class="headerlink" title="Forget"></a>Forget</h3><p><img src="/img/forget.png" alt="forget"><br>previous state就是从上一个节点传过来的output，ft可以看作是一个系数<br>例如，ft&#x3D;0.6 我之前学的总共100个，忘了40个</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p><img src="/img/input.png" alt="input"><br>在这一部分除了input gate以外我们还要计算一个新的temp new memo，是用来准备写入<strong>distilled information</strong></p><blockquote><p>什么是知识蒸馏：比如我新学的单词是之前单词的反义词，那么我不需要记住新单词的完整释义，而是和之前学习过的单词组合 <font color=FF00000>其实就是负责降维</font>  </p></blockquote><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p><img src="/img/update.png" alt="update"><br>把系数和上一个节点传过来的memory以及这个temp new information相乘</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p><img src="/img/output.png" alt="output">  </p><ul><li>output也是同样的训练出来一个系数用于对输出进行筛选</li><li>output本身需要用上面的系数x经过激活函数计算的结果</li></ul><h2 id="考题：parameters的数量计算-其它也可以举一反三"><a href="#考题：parameters的数量计算-其它也可以举一反三" class="headerlink" title="考题：parameters的数量计算(其它也可以举一反三)"></a>考题：parameters的数量计算(其它也可以举一反三)</h2><p>Hidden_dim &#x3D; dimension of output<br>input_dim &#x3D; word embedding dimension</p><p>number of para &#x3D; 4 x (Hidden_dim + input_dim) x Hidden_dim + 4 x Hidden_dim<br>4就是代表计算过程中四种para，分别是Wf, Wi, Wc, Wo<br>row: Hidden_dim + input_dim &#x3D; [ht-1,xt]<br>col: 输出想要的dimension</p><p> 4 x Hidden_dim：b constant</p>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HMM and NN</title>
    <link href="/2024/04/26/NLP-week5-HMM-and-NN/"/>
    <url>/2024/04/26/NLP-week5-HMM-and-NN/</url>
    
    <content type="html"><![CDATA[<h1 id="HMM-hidden-markov-model"><a href="#HMM-hidden-markov-model" class="headerlink" title="HMM: hidden markov model"></a>HMM: hidden markov model</h1><p><img src="/img/hmm.png" alt="hmm"><br>词性只跟上一个词性有关，词只和本位置的词性有关。Hidden是因为词性是不知道的。能观察到的是词，通过词反推获得词性建立联系。</p><p>也就是说我们想知道两个概率：   </p><ol><li>这个位置是这个词性的概率 Transition prob (A): P(wi|ti)</li><li>这个词性是这个词的概率 Emission prob (O): P(ti-1|ti)</li></ol><p>因此，<br>Output independence:<br><strong>假设： 每个word只依赖于tag, word之间是绝对独立的</strong><br>$$<br>P(\vec{w} \mid \vec{t})&#x3D;\prod_{i&#x3D;1}^n P\left(w_i \mid t_i\right)<br>$$</p><p>Markov assimption:<br>在HMM中，当前的tag只跟前一个有关 （类似于N-gram）<br>$$<br>P(\vec{t})&#x3D;\prod_{i&#x3D;1}^n P\left(t_i \mid t_{i-1}\right)<br>$$</p><p>Maximum likelihood estimation:<br><img src="/img/maxesti-5.png" alt="hmm">  </p><p>Core idea : 取所有tag sequences组合中概率最高的</p><p>$\begin{aligned} \hat{t} &amp; &#x3D;\operatorname{argmax}_t P(\vec{W} \mid \vec{t}) P(\vec{t}) \end{aligned}$</p><h2 id="Viterbi-算法"><a href="#Viterbi-算法" class="headerlink" title="Viterbi 算法"></a>Viterbi 算法</h2><p>计算过程：一般题目里面会给两个表格，分别为Table A and Table O, 这两个表记录着计算需要的两个概率。这时我们需要计算第三个表并得出<strong>所有sequence中概率最高的</strong>。</p><h3 id="计算tag-sequence的概率"><a href="#计算tag-sequence的概率" class="headerlink" title="计算tag sequence的概率"></a>计算tag sequence的概率</h3><table><thead><tr><th></th><th>Janet</th><th>will</th><th>back</th><th>the</th><th>bill</th></tr></thead><tbody><tr><td>NNP</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>MD</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>VB</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>JJ</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>NN</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>RB</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>RB</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>表格中的第一列，都为最基础的，例如第一个单元格中， P(Janet|nnp) x P(NNP|s) &#x3D; Score<br>而第一行的第二个单元格中则需要计算前一个位置的每个词性的score，并取最大值<br>假设，我们现在计算前一个词性为NNP，<br><strong>will,NNP score &#x3D; max((will|nnp) x P(NNP|tJanet) x score(tJanet,Janet))</strong><br><strong>根据最后一列最大的score往前回溯</strong>  </p><p>时间复杂度 $$O\left(T^2 N\right)$$<br>T: size of the tagset, rows<br>N: length of the sequence, columns<br>遍历整个表格是T*N，然后后面为了取最大值每个格子中都是N，所以是以上式子</p><h1 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h1><h2 id="Activation-Function"><a href="#Activation-Function" class="headerlink" title="Activation Function"></a>Activation Function</h2><p>主要是为了把linear function来Capture X,Y的关系，比如将一个linear function输出为一个RANGE(-1,1)的向量，同时有很多不同种类的激活函数。<br>Sigmoid中包括logistic function (range(0,1)), tanh(range(-1,1))<br>RuLe:RuLe的计算更简洁</p><h3 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h3><p>$$<br>\underset{}{h&#x3D;\tanh }\left(\sum_j w_j x_j+b\right)<br>$$<br><img src="/img/tahn.png" alt="tahn">   </p><h2 id="Neural-Network的基本结构"><a href="#Neural-Network的基本结构" class="headerlink" title="Neural Network的基本结构"></a>Neural Network的基本结构</h2><p>很早之前就有NN，刚开始算力消耗太大并，overfitting严重 ，并行计算促进NN的发展。</p><blockquote><p>Note: 超过两层就可以算deep learning  </p></blockquote><p><img src="/img/nn.png" alt="nn"><br>中间的hidden layer越多捕捉到的关系越复杂，<br>每一层中的node，分别capture一部分的non-linear relationship。<strong>Fully connected</strong> 就是上一层和下一层的每一个节点都连接。<br><img src="/img/n.png" alt="n">   </p><h3 id="Output-layer"><a href="#Output-layer" class="headerlink" title="Output layer"></a>Output layer</h3><p>输出一共有两种，分别是binary classification和multinomial classification(multi-class classification)</p><ul><li><strong>Binary classification</strong><br>输出层只有一个节点，使用tahn将上一层的函数输入为一个RANGE(-1,1)的值，if -1&lt;y&lt;0, neg; if1&gt;y&gt;&#x3D;0, pos.<blockquote><p>Note: 我们知道如果想把一个(1,5)的矩阵转化成(1,1)的矩阵，那么w也就是系数矩阵必须形状为(5,1)</p></blockquote></li><li><strong>Multinomial classification</strong><br>Y &#x3D; [Y1, Y2, Y3]<br>这个向量指的是：distribution over all possible classes.<br>我们使用SOFTMAX作为最后一层到输出层的激活函数，将一个和不为1的向量转换成概率分布。然后我们取概率最大的分类为结果。</li></ul><h3 id="Loss-function-Gradient-descent"><a href="#Loss-function-Gradient-descent" class="headerlink" title="Loss function &amp; Gradient descent"></a>Loss function &amp; Gradient descent</h3><p>详见appendix</p><h3 id="Overfitting"><a href="#Overfitting" class="headerlink" title="Overfitting"></a>Overfitting</h3><p>parameters多了会导致过拟合，这是因为训练集太细且包括noise，因此我们必须通过Regularization来消除overfitting的影响，并且增加一个penalty component来避免某个系数过大,它的作用是推动模型的参数尽量趋向于零，从而促使模型产生稀疏解，有助于特征选择和模型简化。</p><p>L1-norm: sum of absolute of all parameters<br>L2-norm: sum of squares of all parameters</p><p><strong>特点：</strong></p><ul><li>L1-norm倾向于产生稀疏解，因为它的优化过程中，一些参数会变为零，因此在稀疏模型和特征选择中应用较多。</li><li>L2-norm倾向于产生较小的稠密解，因为它对参数的惩罚更加均衡，避免了一些参数过大的情况，常用于优化算法中的正则化。</li></ul><p><strong>鲁棒性：</strong></p><ul><li>L1-norm对于异常值（outliers）有较好的鲁棒性，因为它不受离群值的影响。</li><li>L2-norm对于异常值的鲁棒性较差，因为它会受到异常值的平方的影响</li></ul><p>$$<br>\operatorname{Loss}&#x3D;-\log (L)+\lambda \Sigma\left|w_r\right|<br>$$<br>lambda是系数,后面一项是penalty compont（前一项就是普通的LOSS）</p><h4 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h4><p>随机扔掉一些节点 增加noise<br>dropout rate &#x3D; 0.2 随机干掉0.2的神经元</p><h2 id="NN的topic-classification的过程"><a href="#NN的topic-classification的过程" class="headerlink" title="NN的topic classification的过程"></a>NN的topic classification的过程</h2><p>任务：输入一个文档，输出一个topic<br><img src="/img/nn-struc.png" alt="nn-s"><br>Input：bag-of-words这个就是每个词的频率<br>Output: y-pred &#x3D; [0.2, 0.1, 0.7] eg. 比如说分别是 eco, pol, spo  </p><h3 id="训练模型："><a href="#训练模型：" class="headerlink" title="训练模型："></a>训练模型：</h3><ul><li>将数据输入模型，通过前向传播计算模型输出，并计算损失值。</li><li>通过反向传播计算梯度，并根据选择的优化器更新模型参数。</li><li>反复迭代这个过程，直到损失值收敛或达到设定的停止条件</li></ul><h2 id="Embeddings"><a href="#Embeddings" class="headerlink" title="Embeddings"></a>Embeddings</h2><p>任务：通过n-gram，比如输入前两个单词，输出后一个单词。这时我们需要用单词的embeddings代替bow，那么我们如何获得embeddings。<br>有趣的是，我们的topic classification的w1就是可以代表单词的向量。当我们需要输入前两个单词时就是把代表这两个单词的向量concatenate一下，比如word1 &#x3D; [0,1], word2 &#x3D; [0,2], 那么输入的向量就是[0,1,0,2]，<strong>值得注意的是，这种方法保留了文字顺序的信息。</strong></p><p>输出：所有单词在这里出现的概率</p><h2 id="对比NN-based-and-count-based-n-gram"><a href="#对比NN-based-and-count-based-n-gram" class="headerlink" title="对比NN-based and count-based n-gram"></a>对比NN-based and count-based n-gram</h2><p>后者不需要大量算力，可以手算，且在大型的datasets上会over sparse（过于稀疏，因为很多count是0）<br>NN则可以capture到单词的grammar or semantic等信息 （film vs movie）</p><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss function"></a>Loss function</h2><p>当处理多分类问题时，常用的损失函数是交叉熵损失函数（Cross-Entropy Loss）。在给定样本和模型输出概率分布向量 y &#x3D; y_1, y_2, …, y_n 的情况下，交叉熵损失函数可以用来衡量模型的预测与真实标签之间的差异。</p><p>具体地，在给定正确的标签向量 y &#x3D; [0, 1, 0, …, 0]，表示样本属于第 j 个类别的情况下，如果模型的预测概率yj 是最大的，即 j 是正确的类别，那么交叉熵损失函数的值会接近于 0；反之，如果 j 不是正确的类别，则损失函数的值会较大。</p><p>对于你提供的例子，假设正确的类别是第二个类别，即输出标签向量为 y &#x3D; [0, 1, 0, …, 0]，而模型的预测概率向量为 y &#x3D; [0.2, 0.7, 0.3, …, 0]，那么对应的交叉熵损失函数可以表示为：</p><p>Loss &#x3D; - (0 * log(0.2) + 1 * log(0.7) + 0 * log(0.3) + …)</p><p>&#x3D; - log(0.7)</p><p>因此，在这个样本中，损失函数的值为负对数预测概率 -log(0.7) </p>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reactive in Vue3.0</title>
    <link href="/2024/01/23/reactive-in-Vue3-0/"/>
    <url>/2024/01/23/reactive-in-Vue3-0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Intro: 响应式编程是Vue的核心概念，理解响应式才能更好的开发vue产品</p></blockquote><h1 id="vue-3-0-setup"><a href="#vue-3-0-setup" class="headerlink" title="vue 3.0 setup"></a>vue 3.0 setup</h1><p>首先我们要知道Vue 3.0提供了setup函数，这使得我们不需要传统的data(){return{}}来声明声明周期 (包括 watch computed等)</p><p>在Vue 3中，Proxy被用于劫持组件实例，以实现响应式数据的跟踪和更新。当你在Vue组件中声明一个响应式的数据属性时，Vue内部会使用Proxy来追踪该属性的变化。这样，当属性的值发生变化时，Vue能够自动检测到这个变化，并更新相关的视图</p><h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><p>JavaScript的Proxy是一种元编程特性，它允许我们拦截并修改对象的基本操作。通过在对象和其目标之间插入一个代理层，<strong>Proxy可以截获对目标对象的各种操作</strong>，包括属性的读取、写入、删除以及函数的调用等。<br>在vue3中获取的数据都会被proxy封装，包括四种reactive，readonly，shallowReactive，shallowReadonly 其中处理逻辑稍有不同但主要分为只读和非只读。这意味着vue可以通过proxy来监听所有的对象变化。<br><a href="https://zhuanlan.zhihu.com/p/461159820">https://zhuanlan.zhihu.com/p/461159820</a></p><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p>ref必须被包装在 watcheffect中才能响应（或者computed），另外在模板中不需要使用value，因为会直接解构 但注意必须在根目录</p><h1 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h1><p>computed, watcheffect, ref是vue中响应式使用的基石，在构建页面时必须设计好这些参数。</p>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>front-end</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Expansion panel</title>
    <link href="/2024/01/23/expansion-panel/"/>
    <url>/2024/01/23/expansion-panel/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Intro: The v-expansion-panels component is useful for reducing vertical space with large amounts of information.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-expansion-panels mandatory v-model=<span class="hljs-string">&quot;expand&quot;</span> variant=<span class="hljs-string">&quot;accordion&quot;</span>&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Measurement Point Properties&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel-text</span> &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">sensor-point-view-form</span> <span class="hljs-attr">:selectedMeasurable</span>=<span class="hljs-string">&quot;selectedMeasurable&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel-text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel</span>&gt;</span></span><br>    &lt;!-- check disable --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Component Properties&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel-text</span> &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">sensor-component-view-form</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel-text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Sensor Assignement&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel-text</span> &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">sensor-sensors-list</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-2&quot;</span> <span class="hljs-attr">:sensors</span>=<span class="hljs-string">&quot;sensorStore.sensorsOnMeasurable&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel-text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel</span>&gt;</span></span><br>    &lt;/v-expansion-panels&gt;<br></code></pre></td></tr></table></figure><p>同样的，expansion panel提供类似v-select的v-model来选择和获取展开的页面，比如初始设定v-model &#x3D; ref(0)。<br>另外 mandatory 强制必须选择一个panel。</p>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vuetify</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuetify</tag>
      
      <tag>front-end</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Menu</title>
    <link href="/2024/01/23/menu/"/>
    <url>/2024/01/23/menu/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Intro: v-menu offer a pop up list around the btn</p></blockquote><h1 id="V-menu"><a href="#V-menu" class="headerlink" title="V-menu"></a>V-menu</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascipt">&lt;v-menu&gt;<br>     &lt;template v-slot:activator=&quot;&#123; props &#125;&quot;&gt;<br>       &lt;v-btn<br>         color=&quot;primary&quot;<br>         v-bind=&quot;props&quot;<br>       &gt;<br>         Activator slot<br>       &lt;/v-btn&gt;<br>     &lt;/template&gt;<br>     &lt;v-list&gt;<br>       &lt;v-list-item<br>         v-for=&quot;(item, index) in items&quot;<br>         :key=&quot;index&quot;<br>         :value=&quot;index&quot;<br>       &gt;<br>         &lt;v-list-item-title&gt;&#123;&#123; item.title &#125;&#125;&lt;/v-list-item-title&gt;<br>       &lt;/v-list-item&gt;<br>     &lt;/v-list&gt;<br>   &lt;/v-menu&gt;<br></code></pre></td></tr></table></figure><p>Actually, the menu can contains anything including the list, like btn,cards or anything else.</p>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vuetify</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuetify</tag>
      
      <tag>front-end</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Breadcrumbs</title>
    <link href="/2024/01/23/breadcrumbs/"/>
    <url>/2024/01/23/breadcrumbs/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Intro: the breadcrumbs offer a formal navigation style like: Previous &#x2F; Now</p></blockquote><h1 id="Breadcrumbs"><a href="#Breadcrumbs" class="headerlink" title="Breadcrumbs"></a>Breadcrumbs</h1><p>In the breadcrumbs items, it offer 2 ways to direct the route, the “href” and “to”.</p><h2 id="item"><a href="#item" class="headerlink" title="item"></a>item</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<br>        &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Layout&#x27;</span>,<br>          <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">to</span>: parentPath,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">title</span>: name.<span class="hljs-property">value</span>,<br>          <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span><br>        &#125;,<br>]<br></code></pre></td></tr></table></figure><p>“to” must give a full address with url</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>         <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Dashboard&#x27;</span>,<br>         <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>,<br>         <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;breadcrumbs_dashboard&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>basically, the href can add “string” after the current url</p><h2 id="divider"><a href="#divider" class="headerlink" title="divider"></a>divider</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    &lt;v-breadcrumbs  :items=<span class="hljs-string">&quot;bread_items&quot;</span> divider=<span class="hljs-string">&quot;&gt;&quot;</span>&gt;&lt;/v-breadcrumbs&gt;<br><span class="hljs-comment">// and divider can have slot: to change the icon with divider</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:divider</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">v-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;mdi-forward&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-icon</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>when using in toolbar, it can used in slot like this </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-toolbar&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-breadcrumbs</span>  <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;bread_items&quot;</span> <span class="hljs-attr">divider</span>=<span class="hljs-string">&quot;&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-breadcrumbs</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/v-toolbar&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vuetify</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuetify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>drag添加图片的实现—基于Vue和vuetify</title>
    <link href="/2024/01/17/drag%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0%E2%80%94%E5%9F%BA%E4%BA%8EVue%E5%92%8Cvuetify/"/>
    <url>/2024/01/17/drag%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0%E2%80%94%E5%9F%BA%E4%BA%8EVue%E5%92%8Cvuetify/</url>
    
    <content type="html"><![CDATA[<h1 id="在组件中"><a href="#在组件中" class="headerlink" title="在组件中"></a>在组件中</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//自定义组件</span><br>&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> plusImg <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;~/assets/img/plus.png&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">VImg</span>,<br>  <span class="hljs-title class_">VCard</span>,<br>  <span class="hljs-title class_">VCardTitle</span>,<br>  <span class="hljs-title class_">VCardSubtitle</span><br><br>&#125;<br>  <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuetify/components&quot;</span>;<br><br><br><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><br><span class="hljs-keyword">const</span> drag = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> active = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;file&#x27;</span>]);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleDrop</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>  e.<span class="hljs-title function_">preventDefault</span>();<br>  active.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;<br>  <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(e.<span class="hljs-property">dataTransfer</span>.<span class="hljs-property">files</span>));<br>  <span class="hljs-comment">//使用e.dataTransfer.files获得拖拽的文件</span><br><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dragEnter</span>(<span class="hljs-params">e</span>) &#123;<br>  e.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">//禁止基本事件</span><br>  active.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dragLeave</span>(<span class="hljs-params">e</span>) &#123;<br>  e.<span class="hljs-title function_">preventDefault</span>()<br>  active.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>&#125;<br><br><br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">v-card</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;flat&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[&#x27;drag&#x27;, &#123; &#x27;drag-active&#x27;: active &#125;]&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;drag&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">drop</span>=<span class="hljs-string">&quot;handleDrop&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">dragover.prevent</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">dragenter</span>=<span class="hljs-string">&quot;dragEnter&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">dragleave</span>=<span class="hljs-string">&quot;dragLeave&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;image-container&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-img</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;plusImg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:lazy-src</span>=<span class="hljs-string">&quot;plusImg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;150px&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-img</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">v-card-title</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: grey;&quot;</span>&gt;</span></span><br><span class="language-xml">      Drag Plan Image Here</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-card-title</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">v-card-subtitle</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="language-xml">      File type: .png, .jpg</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-card-subtitle</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">v-card</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.image-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">justify-content</span>: center;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.drag</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dashed <span class="hljs-number">#DEDEDE</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &amp;-active &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dashed <span class="hljs-number">#a1b8d6</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  * &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">pointer-events</span>: none;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="在父组件中"><a href="#在父组件中" class="headerlink" title="在父组件中"></a>在父组件中</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>&lt;project-drag-upload-file @file=<span class="hljs-string">&quot;handleFiles&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;ma-2&quot;</span>/&gt;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleFiles</span> = (<span class="hljs-params">files</span>) =&gt; &#123;<br>  <br>  <span class="hljs-keyword">if</span>(files &amp;&amp; files.<span class="hljs-property">length</span> &gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;File recieved.&quot;</span>)<br>    <span class="hljs-keyword">const</span> planImage = files[<span class="hljs-number">0</span>]<br>      <span class="hljs-comment">//define files type</span><br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>frontend</tag>
      
      <tag>drag and drop import file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css style</title>
    <link href="/2024/01/17/css-style/"/>
    <url>/2024/01/17/css-style/</url>
    
    <content type="html"><![CDATA[<h1 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h1><p>在我们需要根据页面大小更改布局或者是显示一些可以iteration的组件时候可能需要流式布局。</p><h2 id="flex-flow属性"><a href="#flex-flow属性" class="headerlink" title="flex-flow属性"></a>flex-flow属性</h2><p>flex-row： 控制元素横向排列<br>flex-start：子元素在主轴方向的开始位置往结束方向填充，为justify-content属性的默认值。<br>flex-wrap：元素超过页面最大宽度的时候自动换行</p><p>在vuetify组件中可以使用class来代替css style</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-container <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;ma-3 d-flex flex-row justify-start flex-wrap&quot;</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frontend</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>handlebars</title>
    <link href="/2024/01/17/handlebars/"/>
    <url>/2024/01/17/handlebars/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-use-handlebars-Templating-the-message"><a href="#How-to-use-handlebars-Templating-the-message" class="headerlink" title="How to use handlebars? (Templating the message)"></a>How to use handlebars? (Templating the message)</h1><p><a href="https://handlebarsjs.com/guide/#what-is-handlebars">https://handlebarsjs.com/guide/#what-is-handlebars</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> info =  &#123;<br>        <span class="hljs-attr">vibrationSensorMetrics</span>: &#123;<br>            <span class="hljs-attr">empty</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">stage</span>: &#123;<br>                <span class="hljs-attr">max</span>: <span class="hljs-number">2</span><br>            &#125;<br>        &#125;<br><span class="hljs-comment">//上面应该是个object，不要变成json</span><br><span class="hljs-keyword">let</span> message = <span class="hljs-string">&quot;&lt;b&gt;Motor&lt;/b&gt; is in bad condition due to vibration at stage &#123;&#123;vibrationSensorMetrics.stage.max&#125;&#125;&quot;</span><br><span class="hljs-keyword">const</span> template = <span class="hljs-title class_">Handlebars</span>.<span class="hljs-title function_">compile</span>(message)<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">template</span>(info)<br></code></pre></td></tr></table></figure><blockquote><p>Result: <b>Motor</b> is in bad condition due to vibration at stage 2</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>handlebars</tag>
      
      <tag>template message</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2024/01/17/Vue/"/>
    <url>/2024/01/17/Vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br><span class="hljs-keyword">const</span> &#123;measurableId&#125; = router.<span class="hljs-property">currentRoute</span>.<span class="hljs-property">value</span>.<span class="hljs-property">params</span><br><span class="hljs-comment">//在nuxt中，只能获得本文件夹名字的参数</span><br></code></pre></td></tr></table></figure><h1 id="组件间传值"><a href="#组件间传值" class="headerlink" title="组件间传值"></a>组件间传值</h1><p><a href="https://tallpad.com/series/vuejs-misc/lessons/component-communication-in-vue3-sibling-parent-and-child-components">https://tallpad.com/series/vuejs-misc/lessons/component-communication-in-vue3-sibling-parent-and-child-components</a></p><h1 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h1><p>使用Route可以直接获得目前页面所在的路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();<br><span class="hljs-keyword">const</span> currentPath = route.<span class="hljs-property">path</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>frontend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuetify</title>
    <link href="/2024/01/17/vuetify/"/>
    <url>/2024/01/17/vuetify/</url>
    
    <content type="html"><![CDATA[<h1 id="v-img自带的加载插槽"><a href="#v-img自带的加载插槽" class="headerlink" title="v-img自带的加载插槽"></a>v-img自带的加载插槽</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    &lt;template v-<span class="hljs-attr">slot</span>:placeholder&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fill-height ma-0&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">justify</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">v-progress-circular</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">indeterminate</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;grey-lighten-5&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-progress-circular</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">v-row</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>可以对图片添加加载的动画</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-img<br>      :src=<span class="hljs-string">&quot;plan.url&quot;</span> :lazy-src=<span class="hljs-string">&quot;plan.url&quot;</span><br></code></pre></td></tr></table></figure><p>其中的lazy-src可以在未完全加载资源的时候显示模糊的图片</p><h1 id="How-to-use-v-slot-to-costom-the-components-eg-insert-a-list-into-datatable"><a href="#How-to-use-v-slot-to-costom-the-components-eg-insert-a-list-into-datatable" class="headerlink" title="How to use v-slot to costom the components (eg.insert a list into datatable)"></a>How to use v-slot to costom the components (eg.insert a list into datatable)</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-data-table<br>            :headers=<span class="hljs-string">&quot;alertTableHeaders&quot;</span><br>            :items=<span class="hljs-string">&quot;alertFormatted&quot;</span>&gt;<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:item.info</span>=<span class="hljs-string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;item.info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:item.sensors</span>=<span class="hljs-string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">v-card</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;flat&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;min-width: 200px;&quot;</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-list</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;item.sensors&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">item-title</span>=<span class="hljs-string">&quot;name&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">item-value</span>=<span class="hljs-string">&quot;id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    @<span class="hljs-attr">click:select</span>=<span class="hljs-string">&quot;onSensorSelect&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-list</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-card</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>            &lt;/v-data-table&gt;<br></code></pre></td></tr></table></figure><p>v-slot: default(this is the name of v-slot)&#x3D;”{item}”(the item is the ref of the outer layer value)</p><h1 id="Vuetify-的普通布局"><a href="#Vuetify-的普通布局" class="headerlink" title="Vuetify 的普通布局"></a>Vuetify 的普通布局</h1><blockquote><p>vuetify 使用rows cols提供静态布局,一个col在vuetify中被分为12格</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-row&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">v-col</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">v-col</span>&gt;</span></span><br>&lt;/v-row&gt;<br></code></pre></td></tr></table></figure><h1 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h1><p>vuetify提供一个图标库： <a href="https://pictogrammers.com/library/mdi/">https://pictogrammers.com/library/mdi/</a></p><h1 id="v-list-item"><a href="#v-list-item" class="headerlink" title="v-list-item"></a>v-list-item</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascipt">&lt;v-list-item<br>          title=&quot;Sensors:&quot;<br>          v-for=&quot;sensor in sensorStore.sensorsOnMeasurable&quot;<br>          color=&quot;primary&quot;<br>        &gt;<br></code></pre></td></tr></table></figure><p>使用v-for显示列表，同时不加key等props则不会触发点击特效</p>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vuetify</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vuetify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些实现过程中遇到的小问题</title>
    <link href="/2024/01/17/%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/17/%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="ERROR-undefined-with-pinia-store-arguments"><a href="#ERROR-undefined-with-pinia-store-arguments" class="headerlink" title="ERROR: undefined with pinia store arguments"></a>ERROR: undefined with pinia store arguments</h1><blockquote><p>Resolve: Make sure to use <code>cons&#123;argument&#125; = storeToRefs(Store)</code>to get the reactive value.</p></blockquote><h1 id="ERROR-Failed-to-resolve-component-v-list-item-title-or-any-other-vuetify-component"><a href="#ERROR-Failed-to-resolve-component-v-list-item-title-or-any-other-vuetify-component" class="headerlink" title="ERROR: Failed to resolve component: v-list-item-title(or any other vuetify component)"></a>ERROR: Failed to resolve component: v-list-item-title(or any other vuetify component)</h1><blockquote><p>Resolve: Make sure you import that component</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">VCard</span>,<br>  <span class="hljs-title class_">VList</span><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuetify/components&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="当父组件设置监听事件被子组件挡住时"><a href="#当父组件设置监听事件被子组件挡住时" class="headerlink" title="当父组件设置监听事件被子组件挡住时"></a>当父组件设置监听事件被子组件挡住时</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">* &#123;<br>  pointer-<span class="hljs-attr">events</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuetify</tag>
      
      <tag>typescript</tag>
      
      <tag>nuxt</tag>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pinia</title>
    <link href="/2024/01/17/Pinia/"/>
    <url>/2024/01/17/Pinia/</url>
    
    <content type="html"><![CDATA[<h2 id="Define-A-store-Vue-Composition-API"><a href="#Define-A-store-Vue-Composition-API" class="headerlink" title="Define A store (Vue Composition API)"></a>Define A store (Vue Composition API)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useExampleStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;Example&#x27;</span>,&#123;<br><br><span class="hljs-keyword">const</span> e1 = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">const</span> e2 = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>...<br>&#125;<br>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">e3</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">return</span>&#123;e1,e2,e3&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="computed-parameter-you-can-use-getters-instead-of-computed"><a href="#computed-parameter-you-can-use-getters-instead-of-computed" class="headerlink" title="computed parameter (you can use getters instead of computed)"></a>computed parameter (you can use getters instead of computed)</h4><blockquote><p>当一个store（相当于一个类）的属性值是需要通过别的属性值计算出来时，可以使用computed来简单的表达</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br> <span class="hljs-keyword">const</span> isAuthenticated = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> accessToken.<span class="hljs-property">value</span> !== <span class="hljs-literal">null</span><br>    &#125;)<br></code></pre></td></tr></table></figure><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>ref &#x3D;&gt; assign&#x2F;call value (reactive assignment in vue)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> num = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>num.<span class="hljs-property">value</span> = <span class="hljs-number">20</span> <span class="hljs-comment">// assignment</span><br><span class="hljs-keyword">const</span> a = num.<span class="hljs-property">value</span> <span class="hljs-comment">// call</span><br></code></pre></td></tr></table></figure><h2 id="Using-the-store"><a href="#Using-the-store" class="headerlink" title="Using the store"></a>Using the store</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; useExampleStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;~/stores/example.ts&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useExampleStore</span>()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><p>use example.types.ts to create interface with data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">interface <span class="hljs-title class_">CorporateRole</span> &#123;<br>    <span class="hljs-attr">name</span>: string<br>    <span class="hljs-attr">corporateId</span>: string,<br>    <span class="hljs-attr">role</span>: string<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="storeToRefs"><a href="#storeToRefs" class="headerlink" title="storeToRefs"></a>storeToRefs</h2><p>当你在script中使用store中的值的时候需要使用这个变量将其变为refs，且它保持reactive</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; useCounterStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores/counter&#x27;</span><br><span class="hljs-keyword">import</span> &#123; storeToRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useCounterStore</span>()<br><span class="hljs-keyword">const</span> &#123; name, doubleCount &#125; = <span class="hljs-title function_">storeToRefs</span>(store) <br><span class="hljs-keyword">const</span> &#123; increment &#125; = store<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h2><p>Define when create</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">$reset</span>(<span class="hljs-params"></span>) &#123;<br>    count.<span class="hljs-property">value</span> = <span class="hljs-number">0</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123; count, $reset &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>pinia</tag>
      
      <tag>forntend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Command and CMD</title>
    <link href="/2024/01/17/Linux-Command/"/>
    <url>/2024/01/17/Linux-Command/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-command"><a href="#Linux-command" class="headerlink" title="Linux command"></a>Linux command</h1><blockquote><p>Usually these command are not easy to forget</p></blockquote><ul><li><code>cd ..</code></li><li><code>cp [filename] [source]</code></li><li><code>tar -zxvf filename.tar.gz</code> unzip the file</li></ul><h1 id="Windows-CMD"><a href="#Windows-CMD" class="headerlink" title="Windows CMD"></a>Windows CMD</h1><ul><li><code>D:</code> (use this command to access folder in D:&#x2F;)</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
