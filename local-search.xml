<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Distributional semantics</title>
    <link href="/2024/05/07/Distributional-semantics/"/>
    <url>/2024/05/07/Distributional-semantics/</url>
    
    <content type="html"><![CDATA[<h1 id="Distributional-semantics"><a href="#Distributional-semantics" class="headerlink" title="Distributional semantics"></a>Distributional semantics</h1><blockquote><p>本节将介绍一些Distributional semantics，可以和NN-based区分开</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lexical semantics</title>
    <link href="/2024/05/07/Lexical-senmantics/"/>
    <url>/2024/05/07/Lexical-senmantics/</url>
    
    <content type="html"><![CDATA[<h1 id="Lexical-semantics"><a href="#Lexical-semantics" class="headerlink" title="Lexical semantics"></a>Lexical semantics</h1><ul><li>Semantics: 单词本身的含义 &#x3D;&gt; embedding， vector space （king - man + woman &#x3D; queen）</li><li>Bag of words的局限性：(a)无法捕捉词与词之间的关系; (b) Out of vocabulary(之前没有见过的词，大多数时间就相当于没有见过（当然存在解决方法），embedding可以猜出来词的意义)</li><li>lexical semantics: 表示词语之间关系的词典（不是用词本身构成句子，而是使用词的含义来代替单词构成句子）</li></ul><h2 id="如何表示词义"><a href="#如何表示词义" class="headerlink" title="如何表示词义"></a>如何表示词义</h2><ol><li>基于文字：通过此定中单词的定义来理解单词，然而<strong>定义本身也是由单词组成，所以想要理解定义的含义必须先学习定义中单词，这会导致陷入死循环</strong></li><li>基于关系：用 rule-based关系定义单词之间的关系<br><img src="/img/rule.png" alt="rule"><br><font color=FF7D00>问题:有些词会有很多词义，但有些只有一个</font></li></ol><h3 id="WordNet"><a href="#WordNet" class="headerlink" title="WordNet"></a>WordNet</h3><p>一个树结构的词典，每个单词的每一个sense都有对应的文字定义<br><img src="/img/wordnet.png" alt="wordnet"><br>在这里我们可以区分hypernym和meronym的区别，一个是逻辑上的包含一个是物理上的包含，相对应的hyponym和holonnym也是一样的</p><h3 id="Synset"><a href="#Synset" class="headerlink" title="Synset"></a>Synset</h3><p>WordNet中每⼀个node都是⼀个Synset⽽不是word，concept node上⾯的词&#x2F;label只是集合中的第⼀个词。</p><h2 id="Word-similarity"><a href="#Word-similarity" class="headerlink" title="Word similarity"></a>Word similarity</h2><p>在这里，我们将提出集中方法去计算词义相似度</p><ul><li><p><strong>基于路径长度</strong><br><img src="/img/len-formular.png" alt="len"><br>对于公式的解释： 首先分母上的1是为了使意思完全相同的单词的相似度为1（同时避免除以0），我们可以把第一个式子直接理解为词义相似度，第二个式子则是为了计算词语相似度（因为一个词与不止有一个意思），取最大值也就是最相似的<br><img src="/img/depth.png" alt="depth"><br><font color=FF7D00>问题:从上面的例子可以看出，这种方式无法正确反映词义的距离，词语越深应该edge越短</font>  </p></li><li><p><strong>基于深度</strong></p></li></ul><p>$$<br>\operatorname{simwup}\left(c_1, c_2\right)&#x3D;\frac{2 \times \operatorname{depth}\left(L \operatorname{LCS}\left(c_1, c_2\right)\right)}{\operatorname{depth}\left(c_1\right)+\operatorname{depth}\left(c_2\right)}<br>$$  </p><p>分母：是这两个词本身的位置，代表了这两个词的含义有多精确<br>分子：LCS: lowest common sense, 代表了两个词最小的交集（root）</p><p><img src="/img/depth-eg.png" alt="depth"><br><font color=FF7D00>问题:同一个深度的单词edge也不一定相同，比如说，animal分为水生动物和哺乳动物，他们明显edge不同，因为他们的关系不是很简单的分割</font> </p><ul><li><strong>基于IC（Information Content）</strong><br>我们试图使用IC来代替数edge<br><img src="/img/IC.png" alt="ic"><br>在这里我们引入一个information content的概念，它使用Unigram prob来计算<br><img src="/img/IC-formular.png" alt="ic"><br>concept prob越大，频率越多词义越广，包含的东西越多<br>考试时没出现过overall root,但是很好理解是如果有一个root那他的P应该是1</li></ul><p>$$<br>\operatorname{simlin}\left(c_1, c_2\right)&#x3D;\frac{2 \times \operatorname{IC}\left(\operatorname{LCS}\left(c_1, c_2\right)\right.}{\operatorname{IC}\left(c_1\right)+\operatorname{IC}\left(c_2\right)}<br>$$</p><p><img src="/img/IC-eg.png" alt="ic"><br>注意他给的数是概率还是IC</p><h2 id="Word-sense-disambiguation"><a href="#Word-sense-disambiguation" class="headerlink" title="Word sense disambiguation"></a>Word sense disambiguation</h2><p>在这里我们思考一个任务，这个任务是判断句子中每一个词语的正确sense。<br>Baseline：choose the most common sense (无视content，选择最常用的释义)</p><p>以下提供两种方法来解决这个问题：</p><h3 id="Supervised-learning-approach"><a href="#Supervised-learning-approach" class="headerlink" title="Supervised learning approach"></a>Supervised learning approach</h3><p>Input: labelled corput and left context and right context<br>是一个classification model<br><font color=FF7D00>很难构造dataset，因为需要人工标注</font></p><h3 id="Unsupervised-learning-approach"><a href="#Unsupervised-learning-approach" class="headerlink" title="Unsupervised learning approach"></a>Unsupervised learning approach</h3><ol><li>Lesk: 检查词的context和sense定义的重叠成都（context和discription的单词重叠次数）</li><li>Clustering： 收集大量包含某个词的句子</li></ol><p>第二种方法存在问题:<br><font color=FF7D00>1.poor interpretability 2.need to match with definitions in a lexicon(在找出cluster之后仍然需要手动match sense，且大多数时间对不上)</font></p>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CNN, RNN, LSTM</title>
    <link href="/2024/05/06/CNN/"/>
    <url>/2024/05/06/CNN/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本章只考虑这些模型的基本框架，不需要细究</p></blockquote><h1 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h1><p><img src="/img/cnn.png" alt="cnn"><br>卷积神经网络for NLP的主要途径就是通过sliding window将句子拆分成sequence，最后输出一个sentence embedding的结构。<br>更多的在拼写层级使用CNN。 char vector-&gt; word embedding</p><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ol><li>生成word embedding</li><li>用sliding windows生成 subsequece of words</li><li>通过convolution把input vector降维</li><li>max-pooling在所有的sliding window生成的output vector中选择每个dimension的optimal value，生成一个最终代表整个sentence的vector representation</li><li>将vector representation输入后续节点进行关系捕捉（普通的NN）</li><li>通过后续NN的loss进行反向传播回到convolution中的para</li><li>从step3开始重复，直到loss收敛</li></ol><h1 id="Recurrent-NN-循环神经网络"><a href="#Recurrent-NN-循环神经网络" class="headerlink" title="Recurrent NN 循环神经网络"></a>Recurrent NN 循环神经网络</h1><p>在这里我们讨论的是最简单的RNN，只有一层hidden layer  </p><p>$$<br>s_i&#x3D;\tanh \left(W_s s_{i-1}+W_x x_i+b\right)<br>$$  </p><p><img src="/img/rnn.png" alt="rnn">  </p><p><strong>核心思路：</strong> 每次输入一个单词（而不是句子），同时保持之前的状态（有点像记忆之前的单词），每一个node的input是word以及state中的position信息。 <strong>input X可以无限长，eg.我有一个无限长的句子，但是state不需要和X的维度相同</strong>  </p><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><p><font color=FF00000>值得注意的是,RNN的这些节点是在同一层中，也就是他们共享parameters，因此，无论在哪个时间步上，RNN层的参数都是相同的。</font><br>Wx， Ws， Wy， b</p><h2 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h2><p><img src="/img/rnn-struc.png" alt="rnn-s">  </p><ul><li>每次只input一个 x value（vector）</li><li>同样的word在不同的time frame中会产生不同的output</li><li>计算Loss **L &#x3D; L(Y1)+L(Y2)+L(Y3)**：sum of loss at each time frame</li><li>backpropagation through time,更新所有的参数</li></ul><h2 id="RNN的问题"><a href="#RNN的问题" class="headerlink" title="RNN的问题"></a>RNN的问题</h2><ol><li>High traning cost 每一个node相比FFNN（Feedforward Neural Network也就是我们之前提到的最简单的NN模型）维度很高</li><li>因为有时间顺序，所以无法平行化计算</li><li>error propagation， 你必须在整个句子输入之后才能知道错误，unable to locate intermediant error</li><li>Vanish gradient</li></ol><h3 id="Vanish-gradient"><a href="#Vanish-gradient" class="headerlink" title="Vanish gradient"></a>Vanish gradient</h3><p><img src="/img/vanish.png" alt="vanish"><br>只记忆不遗忘，就导致本来重要的东西权重很低，对于RNN来说</p><h1 id="Long-Short-Term-Memory-Network"><a href="#Long-Short-Term-Memory-Network" class="headerlink" title="Long Short-Term Memory Network"></a>Long Short-Term Memory Network</h1><blockquote><p>本节中提到的模型在LLM出现之前位于统治地位，可以看看workshop是一个非常好的例子</p></blockquote><p>基于RNN的问题，我们需要一个可以遗忘的模型也就是LSTM<br><img src="/img/LSTM.png" alt="LSTM"><br>可以看到每个time frame同样的一个输出一个用于给下一个time node一个用于输出计算loss，与此同时把memory传递一个下一个node  </p><h2 id="怎么理解memory"><a href="#怎么理解memory" class="headerlink" title="怎么理解memory"></a>怎么理解memory</h2><p>在每一个time frame中，会输入一些信息并遗忘一些信息，这部分内容会在下面展开</p><h2 id="Memory详解"><a href="#Memory详解" class="headerlink" title="Memory详解"></a>Memory详解</h2><p>memory中有四个重要的步骤，分别是Forget, Input, Update以及Output  </p><h3 id="Forget"><a href="#Forget" class="headerlink" title="Forget"></a>Forget</h3><p><img src="/img/forget.png" alt="forget"><br>previous state就是从上一个节点传过来的output，ft可以看作是一个系数<br>例如，ft&#x3D;0.6 我之前学的总共100个，忘了40个</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p><img src="/img/input.png" alt="input"><br>在这一部分除了input gate以外我们还要计算一个新的temp new memo，是用来准备写入<strong>distilled information</strong></p><blockquote><p>什么是知识蒸馏：比如我新学的单词是之前单词的反义词，那么我不需要记住新单词的完整释义，而是和之前学习过的单词组合 <font color=FF00000>其实就是负责降维</font>  </p></blockquote><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p><img src="/img/update.png" alt="update"><br>把系数和上一个节点传过来的memory以及这个temp new information相乘</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p><img src="/img/output.png" alt="output">  </p><ul><li>output也是同样的训练出来一个系数用于对输出进行筛选</li><li>output本身需要用上面的系数x经过激活函数计算的结果</li></ul><h2 id="考题：parameters的数量计算-其它也可以举一反三"><a href="#考题：parameters的数量计算-其它也可以举一反三" class="headerlink" title="考题：parameters的数量计算(其它也可以举一反三)"></a>考题：parameters的数量计算(其它也可以举一反三)</h2><p>Hidden_dim &#x3D; dimension of output<br>input_dim &#x3D; word embedding dimension</p><p>number of para &#x3D; 4 x (Hidden_dim + input_dim) x Hidden_dim + 4 x Hidden_dim<br>4就是代表计算过程中四种para，分别是Wf, Wi, Wc, Wo<br>row: Hidden_dim + input_dim &#x3D; [ht-1,xt]<br>col: 输出想要的dimension</p><p> 4 x Hidden_dim：b constant</p>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NLP week5: HMM</title>
    <link href="/2024/04/26/NLP-week5-HMM-and-NN/"/>
    <url>/2024/04/26/NLP-week5-HMM-and-NN/</url>
    
    <content type="html"><![CDATA[<h1 id="HMM-hidden-markov-model"><a href="#HMM-hidden-markov-model" class="headerlink" title="HMM: hidden markov model"></a>HMM: hidden markov model</h1><p><img src="/img/hmm.png" alt="hmm"><br>词性只跟上一个词性有关，词只和本位置的词性有关。Hidden是因为词性是不知道的。能观察到的是词，通过词反推获得词性建立联系。</p><p>也就是说我们想知道两个概率：   </p><ol><li>这个位置是这个词性的概率 Transition prob (A): P(wi|ti)</li><li>这个词性是这个词的概率 Emission prob (O): P(ti-1|ti)</li></ol><p>因此，<br>Output independence:<br><strong>假设： 每个word只依赖于tag, word之间是绝对独立的</strong><br>$$<br>P(\vec{w} \mid \vec{t})&#x3D;\prod_{i&#x3D;1}^n P\left(w_i \mid t_i\right)<br>$$</p><p>Markov assimption:<br>在HMM中，当前的tag只跟前一个有关 （类似于N-gram）<br>$$<br>P(\vec{t})&#x3D;\prod_{i&#x3D;1}^n P\left(t_i \mid t_{i-1}\right)<br>$$</p><p>Maximum likelihood estimation:<br><img src="/img/maxesti-5.png" alt="hmm">  </p><p>Core idea : 取所有tag sequences组合中概率最高的</p><p>$$<br>\begin{aligned}<br>\hat{t} &amp; &#x3D;\operatorname{argmax}<em>t P(\vec{w} \mid \vec{t}) P(\vec{t}) \<br>&amp; &#x3D;\operatorname{argmax}<em>t \prod</em>{i&#x3D;1}^n P\left(w_i \mid t_i\right) P\left(t_1 \mid t</em>{i-1}\right)<br>\end{aligned}<br>$$</p><h2 id="Viterbi-算法"><a href="#Viterbi-算法" class="headerlink" title="Viterbi 算法"></a>Viterbi 算法</h2><p>计算过程：一般题目里面会给两个表格，分别为Table A and Table O, 这两个表记录着计算需要的两个概率。这时我们需要计算第三个表并得出<strong>所有sequence中概率最高的</strong>。</p><h3 id="计算tag-sequence的概率"><a href="#计算tag-sequence的概率" class="headerlink" title="计算tag sequence的概率"></a>计算tag sequence的概率</h3><table><thead><tr><th></th><th>Janet</th><th>will</th><th>back</th><th>the</th><th>bill</th></tr></thead><tbody><tr><td>NNP</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>MD</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>VB</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>JJ</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>NN</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>RB</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>RB</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>表格中的第一列，都为最基础的，例如第一个单元格中， P(Janet|nnp) x P(NNP|s) &#x3D; Score<br>而第一行的第二个单元格中则需要计算前一个位置的每个词性的score，并取最大值<br>假设，我们现在计算前一个词性为NNP，<br><strong>will,NNP score &#x3D; max((will|nnp) x P(NNP|tJanet) x score(tJanet,Janet))</strong><br><strong>根据最后一列最大的score往前回溯</strong>  </p><p>时间复杂度 $$O\left(T^2 N\right)$$<br>T: size of the tagset, rows<br>N: length of the sequence, columns<br>遍历整个表格是T*N，然后后面为了取最大值每个格子中都是N，所以是以上式子</p><h1 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h1><h2 id="Activation-Function"><a href="#Activation-Function" class="headerlink" title="Activation Function"></a>Activation Function</h2><p>主要是为了把linear function来Capture X,Y的关系，比如将一个linear function输出为一个RANGE(-1,1)的向量，同时有很多不同种类的激活函数。<br>Sigmoid中包括logistic function (range(0,1)), tanh(range(-1,1))<br>RuLe:RuLe的计算更简洁</p><h3 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h3><p>$$<br>\underset{}{h&#x3D;\tanh }\left(\sum_j w_j x_j+b\right)<br>$$<br><img src="/img/tahn.png" alt="tahn">   </p><h2 id="Neural-Network的基本结构"><a href="#Neural-Network的基本结构" class="headerlink" title="Neural Network的基本结构"></a>Neural Network的基本结构</h2><p>很早之前就有NN，刚开始算力消耗太大并，overfitting严重 ，并行计算促进NN的发展。</p><blockquote><p>Note: 超过两层就可以算deep learning  </p></blockquote><p><img src="/img/nn.png" alt="nn"><br>中间的hidden layer越多捕捉到的关系越复杂，<br>每一层中的node，分别capture一部分的non-linear relationship。<strong>Fully connected</strong> 就是上一层和下一层的每一个节点都连接。<br><img src="/img/n.png" alt="n">   </p><h3 id="Output-layer"><a href="#Output-layer" class="headerlink" title="Output layer"></a>Output layer</h3><p>输出一共有两种，分别是binary classification和multinomial classification(multi-class classification)</p><ul><li><strong>Binary classification</strong><br>输出层只有一个节点，使用tahn将上一层的函数输入为一个RANGE(-1,1)的值，if -1&lt;y&lt;0, neg; if1&gt;y&gt;&#x3D;0, pos.<blockquote><p>Note: 我们知道如果想把一个(1,5)的矩阵转化成(1,1)的矩阵，那么w也就是系数矩阵必须形状为(5,1)</p></blockquote></li><li><strong>Multinomial classification</strong><br>Y &#x3D; [Y1, Y2, Y3]<br>这个向量指的是：distribution over all possible classes.<br>我们使用SOFTMAX作为最后一层到输出层的激活函数，将一个和不为1的向量转换成概率分布。然后我们取概率最大的分类为结果。</li></ul><h3 id="Loss-function-Gradient-descent"><a href="#Loss-function-Gradient-descent" class="headerlink" title="Loss function &amp; Gradient descent"></a>Loss function &amp; Gradient descent</h3><p>详见appendix</p><h3 id="Overfitting"><a href="#Overfitting" class="headerlink" title="Overfitting"></a>Overfitting</h3><p>parameters多了会导致过拟合，这是因为训练集太细且包括noise，因此我们必须通过Regularization来消除overfitting的影响，并且增加一个penalty component来避免某个系数过大,它的作用是推动模型的参数尽量趋向于零，从而促使模型产生稀疏解，有助于特征选择和模型简化。</p><p>L1-norm: sum of absolute of all parameters<br>L2-norm: sum of squares of all parameters</p><p><strong>特点：</strong></p><ul><li>L1-norm倾向于产生稀疏解，因为它的优化过程中，一些参数会变为零，因此在稀疏模型和特征选择中应用较多。</li><li>L2-norm倾向于产生较小的稠密解，因为它对参数的惩罚更加均衡，避免了一些参数过大的情况，常用于优化算法中的正则化。</li></ul><p><strong>鲁棒性：</strong></p><ul><li>L1-norm对于异常值（outliers）有较好的鲁棒性，因为它不受离群值的影响。</li><li>L2-norm对于异常值的鲁棒性较差，因为它会受到异常值的平方的影响</li></ul><p>$$<br>\operatorname{Loss}&#x3D;-\log (L)+\lambda \Sigma\left|w_r\right|<br>$$<br>lambda是系数,后面一项是penalty compont（前一项就是普通的LOSS）</p><h4 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h4><p>随机扔掉一些节点 增加noise<br>dropout rate &#x3D; 0.2 随机干掉0.2的神经元</p><h2 id="NN的topic-classification的过程"><a href="#NN的topic-classification的过程" class="headerlink" title="NN的topic classification的过程"></a>NN的topic classification的过程</h2><p>任务：输入一个文档，输出一个topic<br><img src="/img/nn-struc.png" alt="nn-s"><br>Input：bag-of-words这个就是每个词的频率<br>Output: y-pred &#x3D; [0.2, 0.1, 0.7] eg. 比如说分别是 eco, pol, spo  </p><h3 id="训练模型："><a href="#训练模型：" class="headerlink" title="训练模型："></a>训练模型：</h3><ul><li>将数据输入模型，通过前向传播计算模型输出，并计算损失值。</li><li>通过反向传播计算梯度，并根据选择的优化器更新模型参数。</li><li>反复迭代这个过程，直到损失值收敛或达到设定的停止条件</li></ul><h2 id="Embeddings"><a href="#Embeddings" class="headerlink" title="Embeddings"></a>Embeddings</h2><p>任务：通过n-gram，比如输入前两个单词，输出后一个单词。这时我们需要用单词的embeddings代替bow，那么我们如何获得embeddings。<br>有趣的是，我们的topic classification的w1就是可以代表单词的向量。当我们需要输入前两个单词时就是把代表这两个单词的向量concatenate一下，比如word1 &#x3D; [0,1], word2 &#x3D; [0,2], 那么输入的向量就是[0,1,0,2]，<strong>值得注意的是，这种方法保留了文字顺序的信息。</strong></p><p>输出：所有单词在这里出现的概率</p><h2 id="对比NN-based-and-count-based-n-gram"><a href="#对比NN-based-and-count-based-n-gram" class="headerlink" title="对比NN-based and count-based n-gram"></a>对比NN-based and count-based n-gram</h2><p>后者不需要大量算力，可以手算，且在大型的datasets上会over sparse（过于稀疏，因为很多count是0）<br>NN则可以capture到单词的grammar or semantic等信息 （film vs movie）</p><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss function"></a>Loss function</h2><p>当处理多分类问题时，常用的损失函数是交叉熵损失函数（Cross-Entropy Loss）。在给定样本和模型输出概率分布向量 (\hat{y} &#x3D; [\hat{y}_1, \hat{y}_2, …, \hat{y}_n]) 的情况下，交叉熵损失函数可以用来衡量模型的预测与真实标签之间的差异。</p><p>具体地，在给定正确的标签向量 (y &#x3D; [0, 1, 0, …, 0])，表示样本属于第 (j) 个类别的情况下，如果模型的预测概率 (\hat{y}_j) 是最大的，即 (j) 是正确的类别，那么交叉熵损失函数的值会接近于 0；反之，如果 (j) 不是正确的类别，则损失函数的值会较大。</p><p>对于你提供的例子，假设正确的类别是第二个类别，即输出标签向量为 (y &#x3D; [0, 1, 0, …, 0])，而模型的预测概率向量为 (\hat{y} &#x3D; [0.2, 0.7, 0.3, …, 0])，那么对应的交叉熵损失函数可以表示为：</p><p>[\text{Loss} &#x3D; - (0 \times \log(0.2) + 1 \times \log(0.7) + 0 \times \log(0.3) + …)]</p><p>[&#x3D; - \log(0.7)]</p><p>因此，在这个样本中，损失函数的值为负对数预测概率 (\log(0.7)) 的负值。</p>]]></content>
    
    
    <categories>
      
      <category>nlp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>natural language processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reactive in Vue3.0</title>
    <link href="/2024/01/23/reactive-in-Vue3-0/"/>
    <url>/2024/01/23/reactive-in-Vue3-0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Intro: 响应式编程是Vue的核心概念，理解响应式才能更好的开发vue产品</p></blockquote><h1 id="vue-3-0-setup"><a href="#vue-3-0-setup" class="headerlink" title="vue 3.0 setup"></a>vue 3.0 setup</h1><p>首先我们要知道Vue 3.0提供了setup函数，这使得我们不需要传统的data(){return{}}来声明声明周期 (包括 watch computed等)</p><p>在Vue 3中，Proxy被用于劫持组件实例，以实现响应式数据的跟踪和更新。当你在Vue组件中声明一个响应式的数据属性时，Vue内部会使用Proxy来追踪该属性的变化。这样，当属性的值发生变化时，Vue能够自动检测到这个变化，并更新相关的视图</p><h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><p>JavaScript的Proxy是一种元编程特性，它允许我们拦截并修改对象的基本操作。通过在对象和其目标之间插入一个代理层，<strong>Proxy可以截获对目标对象的各种操作</strong>，包括属性的读取、写入、删除以及函数的调用等。<br>在vue3中获取的数据都会被proxy封装，包括四种reactive，readonly，shallowReactive，shallowReadonly 其中处理逻辑稍有不同但主要分为只读和非只读。这意味着vue可以通过proxy来监听所有的对象变化。<br><a href="https://zhuanlan.zhihu.com/p/461159820">https://zhuanlan.zhihu.com/p/461159820</a></p><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p>ref必须被包装在 watcheffect中才能响应（或者computed），另外在模板中不需要使用value，因为会直接解构 但注意必须在根目录</p><h1 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h1><p>computed, watcheffect, ref是vue中响应式使用的基石，在构建页面时必须设计好这些参数。</p>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>front-end</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Expansion panel</title>
    <link href="/2024/01/23/expansion-panel/"/>
    <url>/2024/01/23/expansion-panel/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Intro: The v-expansion-panels component is useful for reducing vertical space with large amounts of information.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-expansion-panels mandatory v-model=<span class="hljs-string">&quot;expand&quot;</span> variant=<span class="hljs-string">&quot;accordion&quot;</span>&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Measurement Point Properties&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel-text</span> &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">sensor-point-view-form</span> <span class="hljs-attr">:selectedMeasurable</span>=<span class="hljs-string">&quot;selectedMeasurable&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel-text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel</span>&gt;</span></span><br>    &lt;!-- check disable --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Component Properties&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel-text</span> &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">sensor-component-view-form</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel-text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Sensor Assignement&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-expansion-panel-text</span> &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">sensor-sensors-list</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-2&quot;</span> <span class="hljs-attr">:sensors</span>=<span class="hljs-string">&quot;sensorStore.sensorsOnMeasurable&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel-text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-expansion-panel</span>&gt;</span></span><br>    &lt;/v-expansion-panels&gt;<br></code></pre></td></tr></table></figure><p>同样的，expansion panel提供类似v-select的v-model来选择和获取展开的页面，比如初始设定v-model &#x3D; ref(0)。<br>另外 mandatory 强制必须选择一个panel。</p>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vuetify</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuetify</tag>
      
      <tag>front-end</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Menu</title>
    <link href="/2024/01/23/menu/"/>
    <url>/2024/01/23/menu/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Intro: v-menu offer a pop up list around the btn</p></blockquote><h1 id="V-menu"><a href="#V-menu" class="headerlink" title="V-menu"></a>V-menu</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascipt">&lt;v-menu&gt;<br>     &lt;template v-slot:activator=&quot;&#123; props &#125;&quot;&gt;<br>       &lt;v-btn<br>         color=&quot;primary&quot;<br>         v-bind=&quot;props&quot;<br>       &gt;<br>         Activator slot<br>       &lt;/v-btn&gt;<br>     &lt;/template&gt;<br>     &lt;v-list&gt;<br>       &lt;v-list-item<br>         v-for=&quot;(item, index) in items&quot;<br>         :key=&quot;index&quot;<br>         :value=&quot;index&quot;<br>       &gt;<br>         &lt;v-list-item-title&gt;&#123;&#123; item.title &#125;&#125;&lt;/v-list-item-title&gt;<br>       &lt;/v-list-item&gt;<br>     &lt;/v-list&gt;<br>   &lt;/v-menu&gt;<br></code></pre></td></tr></table></figure><p>Actually, the menu can contains anything including the list, like btn,cards or anything else.</p>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vuetify</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuetify</tag>
      
      <tag>front-end</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Breadcrumbs</title>
    <link href="/2024/01/23/breadcrumbs/"/>
    <url>/2024/01/23/breadcrumbs/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Intro: the breadcrumbs offer a formal navigation style like: Previous &#x2F; Now</p></blockquote><h1 id="Breadcrumbs"><a href="#Breadcrumbs" class="headerlink" title="Breadcrumbs"></a>Breadcrumbs</h1><p>In the breadcrumbs items, it offer 2 ways to direct the route, the “href” and “to”.</p><h2 id="item"><a href="#item" class="headerlink" title="item"></a>item</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<br>        &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Layout&#x27;</span>,<br>          <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">to</span>: parentPath,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">title</span>: name.<span class="hljs-property">value</span>,<br>          <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span><br>        &#125;,<br>]<br></code></pre></td></tr></table></figure><p>“to” must give a full address with url</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>         <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Dashboard&#x27;</span>,<br>         <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>,<br>         <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;breadcrumbs_dashboard&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>basically, the href can add “string” after the current url</p><h2 id="divider"><a href="#divider" class="headerlink" title="divider"></a>divider</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    &lt;v-breadcrumbs  :items=<span class="hljs-string">&quot;bread_items&quot;</span> divider=<span class="hljs-string">&quot;&gt;&quot;</span>&gt;&lt;/v-breadcrumbs&gt;<br><span class="hljs-comment">// and divider can have slot: to change the icon with divider</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:divider</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">v-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;mdi-forward&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-icon</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>when using in toolbar, it can used in slot like this </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-toolbar&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-breadcrumbs</span>  <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;bread_items&quot;</span> <span class="hljs-attr">divider</span>=<span class="hljs-string">&quot;&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-breadcrumbs</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/v-toolbar&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vuetify</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuetify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>drag添加图片的实现—基于Vue和vuetify</title>
    <link href="/2024/01/17/drag%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0%E2%80%94%E5%9F%BA%E4%BA%8EVue%E5%92%8Cvuetify/"/>
    <url>/2024/01/17/drag%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0%E2%80%94%E5%9F%BA%E4%BA%8EVue%E5%92%8Cvuetify/</url>
    
    <content type="html"><![CDATA[<h1 id="在组件中"><a href="#在组件中" class="headerlink" title="在组件中"></a>在组件中</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//自定义组件</span><br>&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> plusImg <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;~/assets/img/plus.png&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">VImg</span>,<br>  <span class="hljs-title class_">VCard</span>,<br>  <span class="hljs-title class_">VCardTitle</span>,<br>  <span class="hljs-title class_">VCardSubtitle</span><br><br>&#125;<br>  <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuetify/components&quot;</span>;<br><br><br><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><br><span class="hljs-keyword">const</span> drag = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> active = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;file&#x27;</span>]);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleDrop</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>  e.<span class="hljs-title function_">preventDefault</span>();<br>  active.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;<br>  <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(e.<span class="hljs-property">dataTransfer</span>.<span class="hljs-property">files</span>));<br>  <span class="hljs-comment">//使用e.dataTransfer.files获得拖拽的文件</span><br><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dragEnter</span>(<span class="hljs-params">e</span>) &#123;<br>  e.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">//禁止基本事件</span><br>  active.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dragLeave</span>(<span class="hljs-params">e</span>) &#123;<br>  e.<span class="hljs-title function_">preventDefault</span>()<br>  active.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>&#125;<br><br><br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">v-card</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;flat&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[&#x27;drag&#x27;, &#123; &#x27;drag-active&#x27;: active &#125;]&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;drag&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">drop</span>=<span class="hljs-string">&quot;handleDrop&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">dragover.prevent</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">dragenter</span>=<span class="hljs-string">&quot;dragEnter&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">dragleave</span>=<span class="hljs-string">&quot;dragLeave&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;image-container&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-img</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;plusImg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:lazy-src</span>=<span class="hljs-string">&quot;plusImg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;150px&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-img</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">v-card-title</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: grey;&quot;</span>&gt;</span></span><br><span class="language-xml">      Drag Plan Image Here</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-card-title</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">v-card-subtitle</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="language-xml">      File type: .png, .jpg</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-card-subtitle</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">v-card</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.image-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">justify-content</span>: center;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.drag</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dashed <span class="hljs-number">#DEDEDE</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &amp;-active &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dashed <span class="hljs-number">#a1b8d6</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  * &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">pointer-events</span>: none;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="在父组件中"><a href="#在父组件中" class="headerlink" title="在父组件中"></a>在父组件中</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>&lt;project-drag-upload-file @file=<span class="hljs-string">&quot;handleFiles&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;ma-2&quot;</span>/&gt;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleFiles</span> = (<span class="hljs-params">files</span>) =&gt; &#123;<br>  <br>  <span class="hljs-keyword">if</span>(files &amp;&amp; files.<span class="hljs-property">length</span> &gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;File recieved.&quot;</span>)<br>    <span class="hljs-keyword">const</span> planImage = files[<span class="hljs-number">0</span>]<br>      <span class="hljs-comment">//define files type</span><br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>frontend</tag>
      
      <tag>drag and drop import file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css style</title>
    <link href="/2024/01/17/css-style/"/>
    <url>/2024/01/17/css-style/</url>
    
    <content type="html"><![CDATA[<h1 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h1><p>在我们需要根据页面大小更改布局或者是显示一些可以iteration的组件时候可能需要流式布局。</p><h2 id="flex-flow属性"><a href="#flex-flow属性" class="headerlink" title="flex-flow属性"></a>flex-flow属性</h2><p>flex-row： 控制元素横向排列<br>flex-start：子元素在主轴方向的开始位置往结束方向填充，为justify-content属性的默认值。<br>flex-wrap：元素超过页面最大宽度的时候自动换行</p><p>在vuetify组件中可以使用class来代替css style</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-container <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;ma-3 d-flex flex-row justify-start flex-wrap&quot;</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frontend</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>handlebars</title>
    <link href="/2024/01/17/handlebars/"/>
    <url>/2024/01/17/handlebars/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-use-handlebars-Templating-the-message"><a href="#How-to-use-handlebars-Templating-the-message" class="headerlink" title="How to use handlebars? (Templating the message)"></a>How to use handlebars? (Templating the message)</h1><p><a href="https://handlebarsjs.com/guide/#what-is-handlebars">https://handlebarsjs.com/guide/#what-is-handlebars</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> info =  &#123;<br>        <span class="hljs-attr">vibrationSensorMetrics</span>: &#123;<br>            <span class="hljs-attr">empty</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">stage</span>: &#123;<br>                <span class="hljs-attr">max</span>: <span class="hljs-number">2</span><br>            &#125;<br>        &#125;<br><span class="hljs-comment">//上面应该是个object，不要变成json</span><br><span class="hljs-keyword">let</span> message = <span class="hljs-string">&quot;&lt;b&gt;Motor&lt;/b&gt; is in bad condition due to vibration at stage &#123;&#123;vibrationSensorMetrics.stage.max&#125;&#125;&quot;</span><br><span class="hljs-keyword">const</span> template = <span class="hljs-title class_">Handlebars</span>.<span class="hljs-title function_">compile</span>(message)<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">template</span>(info)<br></code></pre></td></tr></table></figure><blockquote><p>Result: <b>Motor</b> is in bad condition due to vibration at stage 2</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>handlebars</tag>
      
      <tag>template message</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2024/01/17/Vue/"/>
    <url>/2024/01/17/Vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br><span class="hljs-keyword">const</span> &#123;measurableId&#125; = router.<span class="hljs-property">currentRoute</span>.<span class="hljs-property">value</span>.<span class="hljs-property">params</span><br><span class="hljs-comment">//在nuxt中，只能获得本文件夹名字的参数</span><br></code></pre></td></tr></table></figure><h1 id="组件间传值"><a href="#组件间传值" class="headerlink" title="组件间传值"></a>组件间传值</h1><p><a href="https://tallpad.com/series/vuejs-misc/lessons/component-communication-in-vue3-sibling-parent-and-child-components">https://tallpad.com/series/vuejs-misc/lessons/component-communication-in-vue3-sibling-parent-and-child-components</a></p><h1 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h1><p>使用Route可以直接获得目前页面所在的路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();<br><span class="hljs-keyword">const</span> currentPath = route.<span class="hljs-property">path</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>frontend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuetify</title>
    <link href="/2024/01/17/vuetify/"/>
    <url>/2024/01/17/vuetify/</url>
    
    <content type="html"><![CDATA[<h1 id="v-img自带的加载插槽"><a href="#v-img自带的加载插槽" class="headerlink" title="v-img自带的加载插槽"></a>v-img自带的加载插槽</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    &lt;template v-<span class="hljs-attr">slot</span>:placeholder&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fill-height ma-0&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">justify</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">v-progress-circular</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">indeterminate</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;grey-lighten-5&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-progress-circular</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">v-row</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>可以对图片添加加载的动画</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-img<br>      :src=<span class="hljs-string">&quot;plan.url&quot;</span> :lazy-src=<span class="hljs-string">&quot;plan.url&quot;</span><br></code></pre></td></tr></table></figure><p>其中的lazy-src可以在未完全加载资源的时候显示模糊的图片</p><h1 id="How-to-use-v-slot-to-costom-the-components-eg-insert-a-list-into-datatable"><a href="#How-to-use-v-slot-to-costom-the-components-eg-insert-a-list-into-datatable" class="headerlink" title="How to use v-slot to costom the components (eg.insert a list into datatable)"></a>How to use v-slot to costom the components (eg.insert a list into datatable)</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-data-table<br>            :headers=<span class="hljs-string">&quot;alertTableHeaders&quot;</span><br>            :items=<span class="hljs-string">&quot;alertFormatted&quot;</span>&gt;<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:item.info</span>=<span class="hljs-string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;item.info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:item.sensors</span>=<span class="hljs-string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">v-card</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;flat&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;min-width: 200px;&quot;</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-list</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;item.sensors&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">item-title</span>=<span class="hljs-string">&quot;name&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">item-value</span>=<span class="hljs-string">&quot;id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    @<span class="hljs-attr">click:select</span>=<span class="hljs-string">&quot;onSensorSelect&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-list</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-card</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>            &lt;/v-data-table&gt;<br></code></pre></td></tr></table></figure><p>v-slot: default(this is the name of v-slot)&#x3D;”{item}”(the item is the ref of the outer layer value)</p><h1 id="Vuetify-的普通布局"><a href="#Vuetify-的普通布局" class="headerlink" title="Vuetify 的普通布局"></a>Vuetify 的普通布局</h1><blockquote><p>vuetify 使用rows cols提供静态布局,一个col在vuetify中被分为12格</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;v-row&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">v-col</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">v-col</span>&gt;</span></span><br>&lt;/v-row&gt;<br></code></pre></td></tr></table></figure><h1 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h1><p>vuetify提供一个图标库： <a href="https://pictogrammers.com/library/mdi/">https://pictogrammers.com/library/mdi/</a></p><h1 id="v-list-item"><a href="#v-list-item" class="headerlink" title="v-list-item"></a>v-list-item</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascipt">&lt;v-list-item<br>          title=&quot;Sensors:&quot;<br>          v-for=&quot;sensor in sensorStore.sensorsOnMeasurable&quot;<br>          color=&quot;primary&quot;<br>        &gt;<br></code></pre></td></tr></table></figure><p>使用v-for显示列表，同时不加key等props则不会触发点击特效</p>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vuetify</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vuetify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些实现过程中遇到的小问题</title>
    <link href="/2024/01/17/%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/17/%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="ERROR-undefined-with-pinia-store-arguments"><a href="#ERROR-undefined-with-pinia-store-arguments" class="headerlink" title="ERROR: undefined with pinia store arguments"></a>ERROR: undefined with pinia store arguments</h1><blockquote><p>Resolve: Make sure to use <code>cons&#123;argument&#125; = storeToRefs(Store)</code>to get the reactive value.</p></blockquote><h1 id="ERROR-Failed-to-resolve-component-v-list-item-title-or-any-other-vuetify-component"><a href="#ERROR-Failed-to-resolve-component-v-list-item-title-or-any-other-vuetify-component" class="headerlink" title="ERROR: Failed to resolve component: v-list-item-title(or any other vuetify component)"></a>ERROR: Failed to resolve component: v-list-item-title(or any other vuetify component)</h1><blockquote><p>Resolve: Make sure you import that component</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">VCard</span>,<br>  <span class="hljs-title class_">VList</span><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuetify/components&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="当父组件设置监听事件被子组件挡住时"><a href="#当父组件设置监听事件被子组件挡住时" class="headerlink" title="当父组件设置监听事件被子组件挡住时"></a>当父组件设置监听事件被子组件挡住时</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">* &#123;<br>  pointer-<span class="hljs-attr">events</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuetify</tag>
      
      <tag>typescript</tag>
      
      <tag>nuxt</tag>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pinia</title>
    <link href="/2024/01/17/Pinia/"/>
    <url>/2024/01/17/Pinia/</url>
    
    <content type="html"><![CDATA[<h2 id="Define-A-store-Vue-Composition-API"><a href="#Define-A-store-Vue-Composition-API" class="headerlink" title="Define A store (Vue Composition API)"></a>Define A store (Vue Composition API)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useExampleStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;Example&#x27;</span>,&#123;<br><br><span class="hljs-keyword">const</span> e1 = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">const</span> e2 = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>...<br>&#125;<br>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">e3</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">return</span>&#123;e1,e2,e3&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="computed-parameter-you-can-use-getters-instead-of-computed"><a href="#computed-parameter-you-can-use-getters-instead-of-computed" class="headerlink" title="computed parameter (you can use getters instead of computed)"></a>computed parameter (you can use getters instead of computed)</h4><blockquote><p>当一个store（相当于一个类）的属性值是需要通过别的属性值计算出来时，可以使用computed来简单的表达</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br> <span class="hljs-keyword">const</span> isAuthenticated = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> accessToken.<span class="hljs-property">value</span> !== <span class="hljs-literal">null</span><br>    &#125;)<br></code></pre></td></tr></table></figure><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>ref &#x3D;&gt; assign&#x2F;call value (reactive assignment in vue)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> num = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>num.<span class="hljs-property">value</span> = <span class="hljs-number">20</span> <span class="hljs-comment">// assignment</span><br><span class="hljs-keyword">const</span> a = num.<span class="hljs-property">value</span> <span class="hljs-comment">// call</span><br></code></pre></td></tr></table></figure><h2 id="Using-the-store"><a href="#Using-the-store" class="headerlink" title="Using the store"></a>Using the store</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; useExampleStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;~/stores/example.ts&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useExampleStore</span>()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><p>use example.types.ts to create interface with data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">interface <span class="hljs-title class_">CorporateRole</span> &#123;<br>    <span class="hljs-attr">name</span>: string<br>    <span class="hljs-attr">corporateId</span>: string,<br>    <span class="hljs-attr">role</span>: string<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="storeToRefs"><a href="#storeToRefs" class="headerlink" title="storeToRefs"></a>storeToRefs</h2><p>当你在script中使用store中的值的时候需要使用这个变量将其变为refs，且它保持reactive</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; useCounterStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores/counter&#x27;</span><br><span class="hljs-keyword">import</span> &#123; storeToRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useCounterStore</span>()<br><span class="hljs-keyword">const</span> &#123; name, doubleCount &#125; = <span class="hljs-title function_">storeToRefs</span>(store) <br><span class="hljs-keyword">const</span> &#123; increment &#125; = store<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h2><p>Define when create</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">$reset</span>(<span class="hljs-params"></span>) &#123;<br>    count.<span class="hljs-property">value</span> = <span class="hljs-number">0</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123; count, $reset &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>pinia</tag>
      
      <tag>forntend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Command and CMD</title>
    <link href="/2024/01/17/Linux-Command/"/>
    <url>/2024/01/17/Linux-Command/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-command"><a href="#Linux-command" class="headerlink" title="Linux command"></a>Linux command</h1><blockquote><p>Usually these command are not easy to forget</p></blockquote><ul><li><code>cd ..</code></li><li><code>cp [filename] [source]</code></li><li><code>tar -zxvf filename.tar.gz</code> unzip the file</li></ul><h1 id="Windows-CMD"><a href="#Windows-CMD" class="headerlink" title="Windows CMD"></a>Windows CMD</h1><ul><li><code>D:</code> (use this command to access folder in D:&#x2F;)</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
